
custom_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800522c  0800522c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  0800522c  0800522c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800522c  0800522c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08005234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000158  0800538c  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800538c  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea61  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002637  00000000  00000000  0002ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00031220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  00031c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001611d  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acea  00000000  00000000  000485f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d8f9  00000000  00000000  000532df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  000c0c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080051a8 	.word	0x080051a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080051a8 	.word	0x080051a8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa60 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8de 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f938 	bl	80003cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f004 fc4c 	bl	80049f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

   keyboardHID.id = 1;
 8000160:	4b67      	ldr	r3, [pc, #412]	; (8000300 <main+0x1b4>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
   keyboardHID.modifiers = 0;
 8000166:	4b66      	ldr	r3, [pc, #408]	; (8000300 <main+0x1b4>)
 8000168:	2200      	movs	r2, #0
 800016a:	705a      	strb	r2, [r3, #1]
   keyboardHID.key1 = 0;
 800016c:	4b64      	ldr	r3, [pc, #400]	; (8000300 <main+0x1b4>)
 800016e:	2200      	movs	r2, #0
 8000170:	709a      	strb	r2, [r3, #2]
   keyboardHID.key2 = 0;
 8000172:	4b63      	ldr	r3, [pc, #396]	; (8000300 <main+0x1b4>)
 8000174:	2200      	movs	r2, #0
 8000176:	70da      	strb	r2, [r3, #3]
   keyboardHID.key3 = 0;
 8000178:	4b61      	ldr	r3, [pc, #388]	; (8000300 <main+0x1b4>)
 800017a:	2200      	movs	r2, #0
 800017c:	711a      	strb	r2, [r3, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))               //build & debug button
 800017e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000182:	4860      	ldr	r0, [pc, #384]	; (8000304 <main+0x1b8>)
 8000184:	f000 fd32 	bl	8000bec <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	d121      	bne.n	80001d2 <main+0x86>
		  {
		         hid_buffer[0]=0;
 800018e:	4b5e      	ldr	r3, [pc, #376]	; (8000308 <main+0x1bc>)
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
		          hid_buffer[2]=0x44;
 8000194:	4b5c      	ldr	r3, [pc, #368]	; (8000308 <main+0x1bc>)
 8000196:	2244      	movs	r2, #68	; 0x44
 8000198:	709a      	strb	r2, [r3, #2]

				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 800019a:	2208      	movs	r2, #8
 800019c:	495a      	ldr	r1, [pc, #360]	; (8000308 <main+0x1bc>)
 800019e:	485b      	ldr	r0, [pc, #364]	; (800030c <main+0x1c0>)
 80001a0:	f003 fb48 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 80001a4:	2014      	movs	r0, #20
 80001a6:	f000 fa97 	bl	80006d8 <HAL_Delay>
				while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8));
 80001aa:	bf00      	nop
 80001ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b0:	4854      	ldr	r0, [pc, #336]	; (8000304 <main+0x1b8>)
 80001b2:	f000 fd1b 	bl	8000bec <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d0f7      	beq.n	80001ac <main+0x60>
		         hid_buffer[0]=0;
 80001bc:	4b52      	ldr	r3, [pc, #328]	; (8000308 <main+0x1bc>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
		          hid_buffer[2]=0;
 80001c2:	4b51      	ldr	r3, [pc, #324]	; (8000308 <main+0x1bc>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	709a      	strb	r2, [r3, #2]

				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 80001c8:	2208      	movs	r2, #8
 80001ca:	494f      	ldr	r1, [pc, #316]	; (8000308 <main+0x1bc>)
 80001cc:	484f      	ldr	r0, [pc, #316]	; (800030c <main+0x1c0>)
 80001ce:	f003 fb31 	bl	8003834 <USBD_HID_SendReport>

		  }

          if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))                        // toggle breakpoint
 80001d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d6:	484b      	ldr	r0, [pc, #300]	; (8000304 <main+0x1b8>)
 80001d8:	f000 fd08 	bl	8000bec <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d124      	bne.n	800022c <main+0xe0>
		  {
		        hid_buffer[0]=0x03;
 80001e2:	4b49      	ldr	r3, [pc, #292]	; (8000308 <main+0x1bc>)
 80001e4:	2203      	movs	r2, #3
 80001e6:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=KEY_B;
 80001e8:	4b47      	ldr	r3, [pc, #284]	; (8000308 <main+0x1bc>)
 80001ea:	2205      	movs	r2, #5
 80001ec:	709a      	strb	r2, [r3, #2]

				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 80001ee:	2208      	movs	r2, #8
 80001f0:	4945      	ldr	r1, [pc, #276]	; (8000308 <main+0x1bc>)
 80001f2:	4846      	ldr	r0, [pc, #280]	; (800030c <main+0x1c0>)
 80001f4:	f003 fb1e 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 80001f8:	2014      	movs	r0, #20
 80001fa:	f000 fa6d 	bl	80006d8 <HAL_Delay>
				while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9));
 80001fe:	bf00      	nop
 8000200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000204:	483f      	ldr	r0, [pc, #252]	; (8000304 <main+0x1b8>)
 8000206:	f000 fcf1 	bl	8000bec <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f7      	beq.n	8000200 <main+0xb4>
		        hid_buffer[0]=0;
 8000210:	4b3d      	ldr	r3, [pc, #244]	; (8000308 <main+0x1bc>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0;
 8000216:	4b3c      	ldr	r3, [pc, #240]	; (8000308 <main+0x1bc>)
 8000218:	2200      	movs	r2, #0
 800021a:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 800021c:	2208      	movs	r2, #8
 800021e:	493a      	ldr	r1, [pc, #232]	; (8000308 <main+0x1bc>)
 8000220:	483a      	ldr	r0, [pc, #232]	; (800030c <main+0x1c0>)
 8000222:	f003 fb07 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 8000226:	2014      	movs	r0, #20
 8000228:	f000 fa56 	bl	80006d8 <HAL_Delay>

		  }

		  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))                     //comment line
 800022c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000230:	4834      	ldr	r0, [pc, #208]	; (8000304 <main+0x1b8>)
 8000232:	f000 fcdb 	bl	8000bec <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d124      	bne.n	8000286 <main+0x13a>
		  {
		        hid_buffer[0]=0x01;
 800023c:	4b32      	ldr	r3, [pc, #200]	; (8000308 <main+0x1bc>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0x24;
 8000242:	4b31      	ldr	r3, [pc, #196]	; (8000308 <main+0x1bc>)
 8000244:	2224      	movs	r2, #36	; 0x24
 8000246:	709a      	strb	r2, [r3, #2]

				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 8000248:	2208      	movs	r2, #8
 800024a:	492f      	ldr	r1, [pc, #188]	; (8000308 <main+0x1bc>)
 800024c:	482f      	ldr	r0, [pc, #188]	; (800030c <main+0x1c0>)
 800024e:	f003 faf1 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 8000252:	2014      	movs	r0, #20
 8000254:	f000 fa40 	bl	80006d8 <HAL_Delay>
				while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8000258:	bf00      	nop
 800025a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025e:	4829      	ldr	r0, [pc, #164]	; (8000304 <main+0x1b8>)
 8000260:	f000 fcc4 	bl	8000bec <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f7      	beq.n	800025a <main+0x10e>
		        hid_buffer[0]=0;
 800026a:	4b27      	ldr	r3, [pc, #156]	; (8000308 <main+0x1bc>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0x00;
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <main+0x1bc>)
 8000272:	2200      	movs	r2, #0
 8000274:	709a      	strb	r2, [r3, #2]

				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 8000276:	2208      	movs	r2, #8
 8000278:	4923      	ldr	r1, [pc, #140]	; (8000308 <main+0x1bc>)
 800027a:	4824      	ldr	r0, [pc, #144]	; (800030c <main+0x1c0>)
 800027c:	f003 fada 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 8000280:	2014      	movs	r0, #20
 8000282:	f000 fa29 	bl	80006d8 <HAL_Delay>
		  }

		  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))                      //switch back to the previous window
 8000286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028a:	4821      	ldr	r0, [pc, #132]	; (8000310 <main+0x1c4>)
 800028c:	f000 fcae 	bl	8000bec <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	f47f af73 	bne.w	800017e <main+0x32>
		  {
		        hid_buffer[0]=0x14;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0x1bc>)
 800029a:	2214      	movs	r2, #20
 800029c:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0x2B;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <main+0x1bc>)
 80002a0:	222b      	movs	r2, #43	; 0x2b
 80002a2:	709a      	strb	r2, [r3, #2]
		        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 80002a4:	2208      	movs	r2, #8
 80002a6:	4918      	ldr	r1, [pc, #96]	; (8000308 <main+0x1bc>)
 80002a8:	4818      	ldr	r0, [pc, #96]	; (800030c <main+0x1c0>)
 80002aa:	f003 fac3 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 80002ae:	2014      	movs	r0, #20
 80002b0:	f000 fa12 	bl	80006d8 <HAL_Delay>
				while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 80002b4:	bf00      	nop
 80002b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0x1c4>)
 80002bc:	f000 fc96 	bl	8000bec <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f7      	beq.n	80002b6 <main+0x16a>
		        hid_buffer[0]=0;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <main+0x1bc>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0x2C;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <main+0x1bc>)
 80002ce:	222c      	movs	r2, #44	; 0x2c
 80002d0:	709a      	strb	r2, [r3, #2]
		        USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 80002d2:	2208      	movs	r2, #8
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <main+0x1bc>)
 80002d6:	480d      	ldr	r0, [pc, #52]	; (800030c <main+0x1c0>)
 80002d8:	f003 faac 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 80002dc:	2014      	movs	r0, #20
 80002de:	f000 f9fb 	bl	80006d8 <HAL_Delay>
		        hid_buffer[0]=0;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <main+0x1bc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
		        hid_buffer[2]=0;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <main+0x1bc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, hid_buffer, 8);
 80002ee:	2208      	movs	r2, #8
 80002f0:	4905      	ldr	r1, [pc, #20]	; (8000308 <main+0x1bc>)
 80002f2:	4806      	ldr	r0, [pc, #24]	; (800030c <main+0x1c0>)
 80002f4:	f003 fa9e 	bl	8003834 <USBD_HID_SendReport>
				HAL_Delay(20);
 80002f8:	2014      	movs	r0, #20
 80002fa:	f000 f9ed 	bl	80006d8 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))               //build & debug button
 80002fe:	e73e      	b.n	800017e <main+0x32>
 8000300:	20000194 	.word	0x20000194
 8000304:	40010800 	.word	0x40010800
 8000308:	20000174 	.word	0x20000174
 800030c:	200001a0 	.word	0x200001a0
 8000310:	40010c00 	.word	0x40010c00

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b094      	sub	sp, #80	; 0x50
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f004 ff38 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000356:	2302      	movs	r3, #2
 8000358:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fb22 	bl	80019b4 <HAL_RCC_OscConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000376:	f000 f887 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037a:	230f      	movs	r3, #15
 800037c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037e:	2302      	movs	r3, #2
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2101      	movs	r1, #1
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fd8c 	bl	8001eb4 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003a2:	f000 f871 	bl	8000488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003a6:	2310      	movs	r3, #16
 80003a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003ae:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fee8 	bl	8002188 <HAL_RCCEx_PeriphCLKConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003be:	f000 f863 	bl	8000488 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3750      	adds	r7, #80	; 0x50
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_GPIO_Init+0xb0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a25      	ldr	r2, [pc, #148]	; (800047c <MX_GPIO_Init+0xb0>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b23      	ldr	r3, [pc, #140]	; (800047c <MX_GPIO_Init+0xb0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_GPIO_Init+0xb0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a1f      	ldr	r2, [pc, #124]	; (800047c <MX_GPIO_Init+0xb0>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_GPIO_Init+0xb0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0320 	and.w	r3, r3, #32
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_GPIO_Init+0xb0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a19      	ldr	r2, [pc, #100]	; (800047c <MX_GPIO_Init+0xb0>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_GPIO_Init+0xb0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_GPIO_Init+0xb0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <MX_GPIO_Init+0xb0>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_GPIO_Init+0xb0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044a:	2301      	movs	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	480a      	ldr	r0, [pc, #40]	; (8000480 <MX_GPIO_Init+0xb4>)
 8000456:	f000 fa6f 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800045a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_GPIO_Init+0xb8>)
 8000470:	f000 fa62 	bl	8000938 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40010c00 	.word	0x40010c00
 8000484:	40010800 	.word	0x40010800

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_MspInit+0x60>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_MspInit+0x60>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <HardFault_Handler+0x4>

0800050a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <BusFault_Handler+0x4>

08000516 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f8ac 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000552:	f000 fc69 	bl	8000e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000664 	.word	0x20000664

08000560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <SystemInit+0x5c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <SystemInit+0x5c>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <SystemInit+0x5c>)
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <SystemInit+0x5c>)
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <SystemInit+0x60>)
 8000578:	4013      	ands	r3, r2
 800057a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <SystemInit+0x5c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <SystemInit+0x5c>)
 8000582:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <SystemInit+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <SystemInit+0x5c>)
 8000592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000596:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <SystemInit+0x5c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <SystemInit+0x5c>)
 800059e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <SystemInit+0x5c>)
 80005a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <SystemInit+0x64>)
 80005ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	f8ff0000 	.word	0xf8ff0000
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ee:	f7ff ffb7 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f004 fdad 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fda9 	bl	800014c <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r3, =_sidata
 80005fc:	08005234 	.word	0x08005234
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000604:	20000158 	.word	0x20000158
  ldr r2, =_sbss
 8000608:	20000158 	.word	0x20000158
  ldr r3, = _ebss
 800060c:	200008d0 	.word	0x200008d0

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f945 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff30 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f95d 	bl	800091e <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f925 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000008 	.word	0x20000008
 80006c0:	2000019c 	.word	0x2000019c

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	2000019c 	.word	0x2000019c

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff fff0 	bl	80006c4 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffe0 	bl	80006c4 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4906      	ldr	r1, [pc, #24]	; (80007b4 <__NVIC_EnableIRQ+0x34>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff90 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff2d 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff42 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff35 	bl	8000780 <__NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffa2 	bl	8000870 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e127      	b.n	8000b9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800094c:	2201      	movs	r2, #1
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	429a      	cmp	r2, r3
 8000966:	f040 8116 	bne.w	8000b96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b12      	cmp	r3, #18
 8000970:	d034      	beq.n	80009dc <HAL_GPIO_Init+0xa4>
 8000972:	2b12      	cmp	r3, #18
 8000974:	d80d      	bhi.n	8000992 <HAL_GPIO_Init+0x5a>
 8000976:	2b02      	cmp	r3, #2
 8000978:	d02b      	beq.n	80009d2 <HAL_GPIO_Init+0x9a>
 800097a:	2b02      	cmp	r3, #2
 800097c:	d804      	bhi.n	8000988 <HAL_GPIO_Init+0x50>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d031      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
 8000982:	2b01      	cmp	r3, #1
 8000984:	d01c      	beq.n	80009c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000986:	e048      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000988:	2b03      	cmp	r3, #3
 800098a:	d043      	beq.n	8000a14 <HAL_GPIO_Init+0xdc>
 800098c:	2b11      	cmp	r3, #17
 800098e:	d01b      	beq.n	80009c8 <HAL_GPIO_Init+0x90>
          break;
 8000990:	e043      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000992:	4a89      	ldr	r2, [pc, #548]	; (8000bb8 <HAL_GPIO_Init+0x280>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d026      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
 8000998:	4a87      	ldr	r2, [pc, #540]	; (8000bb8 <HAL_GPIO_Init+0x280>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d806      	bhi.n	80009ac <HAL_GPIO_Init+0x74>
 800099e:	4a87      	ldr	r2, [pc, #540]	; (8000bbc <HAL_GPIO_Init+0x284>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d020      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
 80009a4:	4a86      	ldr	r2, [pc, #536]	; (8000bc0 <HAL_GPIO_Init+0x288>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d01d      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
          break;
 80009aa:	e036      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009ac:	4a85      	ldr	r2, [pc, #532]	; (8000bc4 <HAL_GPIO_Init+0x28c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d019      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
 80009b2:	4a85      	ldr	r2, [pc, #532]	; (8000bc8 <HAL_GPIO_Init+0x290>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d016      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
 80009b8:	4a84      	ldr	r2, [pc, #528]	; (8000bcc <HAL_GPIO_Init+0x294>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0xae>
          break;
 80009be:	e02c      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	623b      	str	r3, [r7, #32]
          break;
 80009c6:	e028      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	3304      	adds	r3, #4
 80009ce:	623b      	str	r3, [r7, #32]
          break;
 80009d0:	e023      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	3308      	adds	r3, #8
 80009d8:	623b      	str	r3, [r7, #32]
          break;
 80009da:	e01e      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	330c      	adds	r3, #12
 80009e2:	623b      	str	r3, [r7, #32]
          break;
 80009e4:	e019      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d102      	bne.n	80009f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ee:	2304      	movs	r3, #4
 80009f0:	623b      	str	r3, [r7, #32]
          break;
 80009f2:	e012      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d105      	bne.n	8000a08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	611a      	str	r2, [r3, #16]
          break;
 8000a06:	e008      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	615a      	str	r2, [r3, #20]
          break;
 8000a12:	e002      	b.n	8000a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
          break;
 8000a18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	2bff      	cmp	r3, #255	; 0xff
 8000a1e:	d801      	bhi.n	8000a24 <HAL_GPIO_Init+0xec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	e001      	b.n	8000a28 <HAL_GPIO_Init+0xf0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3304      	adds	r3, #4
 8000a28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d802      	bhi.n	8000a36 <HAL_GPIO_Init+0xfe>
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x104>
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	210f      	movs	r1, #15
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	6a39      	ldr	r1, [r7, #32]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	431a      	orrs	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f000 8096 	beq.w	8000b96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <HAL_GPIO_Init+0x298>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a58      	ldr	r2, [pc, #352]	; (8000bd0 <HAL_GPIO_Init+0x298>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <HAL_GPIO_Init+0x298>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a82:	4a54      	ldr	r2, [pc, #336]	; (8000bd4 <HAL_GPIO_Init+0x29c>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4b      	ldr	r2, [pc, #300]	; (8000bd8 <HAL_GPIO_Init+0x2a0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x19e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <HAL_GPIO_Init+0x2a4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_GPIO_Init+0x19a>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a49      	ldr	r2, [pc, #292]	; (8000be0 <HAL_GPIO_Init+0x2a8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d007      	beq.n	8000ace <HAL_GPIO_Init+0x196>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <HAL_GPIO_Init+0x2ac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_GPIO_Init+0x192>
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x1a0>
 8000aca:	2304      	movs	r3, #4
 8000acc:	e004      	b.n	8000ad8 <HAL_GPIO_Init+0x1a0>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_Init+0x1a0>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <HAL_GPIO_Init+0x1a0>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ada:	f002 0203 	and.w	r2, r2, #3
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4093      	lsls	r3, r2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae8:	493a      	ldr	r1, [pc, #232]	; (8000bd4 <HAL_GPIO_Init+0x29c>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4938      	ldr	r1, [pc, #224]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4933      	ldr	r1, [pc, #204]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	492e      	ldr	r1, [pc, #184]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	604b      	str	r3, [r1, #4]
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4929      	ldr	r1, [pc, #164]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	4924      	ldr	r1, [pc, #144]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	608b      	str	r3, [r1, #8]
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	491f      	ldr	r1, [pc, #124]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	491a      	ldr	r1, [pc, #104]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60cb      	str	r3, [r1, #12]
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	3301      	adds	r3, #1
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f47f aed0 	bne.w	800094c <HAL_GPIO_Init+0x14>
  }
}
 8000bac:	bf00      	nop
 8000bae:	372c      	adds	r7, #44	; 0x2c
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	10210000 	.word	0x10210000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	10120000 	.word	0x10120000
 8000bc4:	10310000 	.word	0x10310000
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40011400 	.word	0x40011400
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1c:	b08b      	sub	sp, #44	; 0x2c
 8000c1e:	af06      	add	r7, sp, #24
 8000c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e0d3      	b.n	8000dd4 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f004 f80d 	bl	8004c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fb75 	bl	8002342 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	687e      	ldr	r6, [r7, #4]
 8000c60:	466d      	mov	r5, sp
 8000c62:	f106 0410 	add.w	r4, r6, #16
 8000c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	1d33      	adds	r3, r6, #4
 8000c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f001 fb3e 	bl	80022f4 <USB_CoreInit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2202      	movs	r2, #2
 8000c82:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e0a4      	b.n	8000dd4 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fb72 	bl	800237a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e035      	b.n	8000d08 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	015b      	lsls	r3, r3, #5
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3329      	adds	r3, #41	; 0x29
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	015b      	lsls	r3, r3, #5
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3328      	adds	r3, #40	; 0x28
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	b291      	uxth	r1, r2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	015b      	lsls	r3, r3, #5
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3336      	adds	r3, #54	; 0x36
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	015b      	lsls	r3, r3, #5
 8000cd0:	4413      	add	r3, r2
 8000cd2:	332b      	adds	r3, #43	; 0x2b
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	015b      	lsls	r3, r3, #5
 8000cde:	4413      	add	r3, r2
 8000ce0:	3338      	adds	r3, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	015b      	lsls	r3, r3, #5
 8000cec:	4413      	add	r3, r2
 8000cee:	333c      	adds	r3, #60	; 0x3c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	3301      	adds	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3c4      	bcc.n	8000c9c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e031      	b.n	8000d7c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	015b      	lsls	r3, r3, #5
 8000d1e:	4413      	add	r3, r2
 8000d20:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	015b      	lsls	r3, r3, #5
 8000d2e:	4413      	add	r3, r2
 8000d30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	015b      	lsls	r3, r3, #5
 8000d3e:	4413      	add	r3, r2
 8000d40:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	015b      	lsls	r3, r3, #5
 8000d4e:	4413      	add	r3, r2
 8000d50:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	015b      	lsls	r3, r3, #5
 8000d5e:	4413      	add	r3, r2
 8000d60:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	330a      	adds	r3, #10
 8000d6e:	015b      	lsls	r3, r3, #5
 8000d70:	4413      	add	r3, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3c8      	bcc.n	8000d18 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	687e      	ldr	r6, [r7, #4]
 8000d8e:	466d      	mov	r5, sp
 8000d90:	f106 0410 	add.w	r4, r6, #16
 8000d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	1d33      	adds	r3, r6, #4
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	6838      	ldr	r0, [r7, #0]
 8000da2:	f001 faf6 	bl	8002392 <USB_DevInit>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2202      	movs	r2, #2
 8000db0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e00d      	b.n	8000dd4 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fb34 	bl	800343a <USB_DevDisconnect>

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ddc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <HAL_PCD_Start+0x16>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e016      	b.n	8000e20 <HAL_PCD_Start+0x44>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f004 f970 	bl	80050e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fb0d 	bl	8003426 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fa7f 	bl	8002314 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 fb0a 	bl	800344e <USB_ReadInterrupts>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e44:	d102      	bne.n	8000e4c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 fade 	bl	8001408 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fafc 	bl	800344e <USB_ReadInterrupts>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	d112      	bne.n	8000e88 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e74:	b292      	uxth	r2, r2
 8000e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f003 ff65 	bl	8004d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f8de 	bl	8001044 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 fade 	bl	800344e <USB_ReadInterrupts>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fac7 	bl	800344e <USB_ReadInterrupts>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eca:	d10b      	bne.n	8000ee4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fab0 	bl	800344e <USB_ReadInterrupts>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef8:	d126      	bne.n	8000f48 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0204 	bic.w	r2, r2, #4
 8000f0c:	b292      	uxth	r2, r2
 8000f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0208 	bic.w	r2, r2, #8
 8000f24:	b292      	uxth	r2, r2
 8000f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f003 ff46 	bl	8004dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f42:	b292      	uxth	r2, r2
 8000f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fa7e 	bl	800344e <USB_ReadInterrupts>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f5c:	d13d      	bne.n	8000fda <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0208 	orr.w	r2, r2, #8
 8000f70:	b292      	uxth	r2, r2
 8000f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0204 	orr.w	r2, r2, #4
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fa4f 	bl	800344e <USB_ReadInterrupts>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fba:	d10b      	bne.n	8000fd4 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f003 fed7 	bl	8004d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fa35 	bl	800344e <USB_ReadInterrupts>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fee:	d10e      	bne.n	800100e <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001002:	b292      	uxth	r2, r2
 8001004:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f003 fe90 	bl	8004d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fa1b 	bl	800344e <USB_ReadInterrupts>
 8001018:	4603      	mov	r3, r0
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001022:	d10b      	bne.n	800103c <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_PCD_SetAddress+0x1a>
 800105a:	2302      	movs	r3, #2
 800105c:	e013      	b.n	8001086 <HAL_PCD_SetAddress+0x42>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	78fa      	ldrb	r2, [r7, #3]
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f9c2 	bl	8003400 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	4608      	mov	r0, r1
 8001098:	4611      	mov	r1, r2
 800109a:	461a      	mov	r2, r3
 800109c:	4603      	mov	r3, r0
 800109e:	70fb      	strb	r3, [r7, #3]
 80010a0:	460b      	mov	r3, r1
 80010a2:	803b      	strh	r3, [r7, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da0b      	bge.n	80010cc <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	3328      	adds	r3, #40	; 0x28
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	705a      	strb	r2, [r3, #1]
 80010ca:	e00b      	b.n	80010e4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	015b      	lsls	r3, r3, #5
 80010d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	78ba      	ldrb	r2, [r7, #2]
 80010fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b29a      	uxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d102      	bne.n	800111a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_PCD_EP_Open+0x9a>
 8001124:	2302      	movs	r3, #2
 8001126:	e00e      	b.n	8001146 <HAL_PCD_EP_Open+0xb8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f950 	bl	80023dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001144:	7afb      	ldrb	r3, [r7, #11]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800115a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	da0b      	bge.n	800117a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	3328      	adds	r3, #40	; 0x28
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	705a      	strb	r2, [r3, #1]
 8001178:	e00b      	b.n	8001192 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	015b      	lsls	r3, r3, #5
 8001182:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_PCD_EP_Close+0x5e>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e00e      	b.n	80011ca <HAL_PCD_EP_Close+0x7c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68f9      	ldr	r1, [r7, #12]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fbfc 	bl	80029b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	460b      	mov	r3, r1
 80011e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	b2da      	uxtb	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001218:	7afb      	ldrb	r3, [r7, #11]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fd5b 	bl	8002ce4 <USB_EPStartXfer>
 800122e:	e005      	b.n	800123c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6979      	ldr	r1, [r7, #20]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fd54 	bl	8002ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2201      	movs	r2, #1
 800127c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	b2da      	uxtb	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6979      	ldr	r1, [r7, #20]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fd22 	bl	8002ce4 <USB_EPStartXfer>
 80012a0:	e005      	b.n	80012ae <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fd1b 	bl	8002ce4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	f003 0207 	and.w	r2, r3, #7
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d901      	bls.n	80012d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e046      	b.n	8001364 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da0b      	bge.n	80012f6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	3328      	adds	r3, #40	; 0x28
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2201      	movs	r2, #1
 80012f2:	705a      	strb	r2, [r3, #1]
 80012f4:	e009      	b.n	800130a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	b2da      	uxtb	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <HAL_PCD_EP_SetStall+0x72>
 8001326:	2302      	movs	r3, #2
 8001328:	e01c      	b.n	8001364 <HAL_PCD_EP_SetStall+0xac>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68f9      	ldr	r1, [r7, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f001 ff8b 	bl	8003254 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f002 f889 	bl	800346c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d901      	bls.n	800138a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e03a      	b.n	8001400 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800138a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800138e:	2b00      	cmp	r3, #0
 8001390:	da0b      	bge.n	80013aa <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	015b      	lsls	r3, r3, #5
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	705a      	strb	r2, [r3, #1]
 80013a8:	e00b      	b.n	80013c2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	015b      	lsls	r3, r3, #5
 80013b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_PCD_EP_ClrStall+0x76>
 80013de:	2302      	movs	r3, #2
 80013e0:	e00e      	b.n	8001400 <HAL_PCD_EP_ClrStall+0x94>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68f9      	ldr	r1, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 ff71 	bl	80032d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001410:	e282      	b.n	8001918 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800141a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800141c:	8afb      	ldrh	r3, [r7, #22]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001426:	7d7b      	ldrb	r3, [r7, #21]
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 8142 	bne.w	80016b2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800142e:	8afb      	ldrh	r3, [r7, #22]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	d151      	bne.n	80014dc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001448:	b29c      	uxth	r4, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001456:	b29b      	uxth	r3, r3
 8001458:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3328      	adds	r3, #40	; 0x28
 800145e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001468:	b29b      	uxth	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	3302      	adds	r3, #2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	441a      	add	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f003 fc2f 	bl	8004d00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8234 	beq.w	8001918 <PCD_EP_ISR_Handler+0x510>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f040 822f 	bne.w	8001918 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014da:	e21d      	b.n	8001918 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014e2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014ec:	8a7b      	ldrh	r3, [r7, #18]
 80014ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d033      	beq.n	800155e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014fe:	b29b      	uxth	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	3306      	adds	r3, #6
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001534:	b29b      	uxth	r3, r3
 8001536:	f001 ffe8 	bl	800350a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001546:	4013      	ands	r3, r2
 8001548:	b29c      	uxth	r4, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f003 fba8 	bl	8004cac <HAL_PCD_SetupStageCallback>
 800155c:	e1dc      	b.n	8001918 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800155e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f280 81d8 	bge.w	8001918 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b29a      	uxth	r2, r3
 8001570:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001574:	4013      	ands	r3, r2
 8001576:	b29c      	uxth	r4, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001580:	b292      	uxth	r2, r2
 8001582:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800158c:	b29b      	uxth	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	3306      	adds	r3, #6
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d019      	beq.n	80015ec <PCD_EP_ISR_Handler+0x1e4>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d015      	beq.n	80015ec <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6959      	ldr	r1, [r3, #20]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f001 ff9a 	bl	800350a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	441a      	add	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015e4:	2100      	movs	r1, #0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f003 fb72 	bl	8004cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461c      	mov	r4, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	441c      	add	r4, r3
 80015fe:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001602:	461c      	mov	r4, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10e      	bne.n	800162a <PCD_EP_ISR_Handler+0x222>
 800160c:	8823      	ldrh	r3, [r4, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001614:	b29b      	uxth	r3, r3
 8001616:	8023      	strh	r3, [r4, #0]
 8001618:	8823      	ldrh	r3, [r4, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001624:	b29b      	uxth	r3, r3
 8001626:	8023      	strh	r3, [r4, #0]
 8001628:	e02d      	b.n	8001686 <PCD_EP_ISR_Handler+0x27e>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b3e      	cmp	r3, #62	; 0x3e
 8001630:	d812      	bhi.n	8001658 <PCD_EP_ISR_Handler+0x250>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <PCD_EP_ISR_Handler+0x244>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	b29b      	uxth	r3, r3
 8001650:	029b      	lsls	r3, r3, #10
 8001652:	b29b      	uxth	r3, r3
 8001654:	8023      	strh	r3, [r4, #0]
 8001656:	e016      	b.n	8001686 <PCD_EP_ISR_Handler+0x27e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <PCD_EP_ISR_Handler+0x26a>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3b01      	subs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	b29b      	uxth	r3, r3
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	b29b      	uxth	r3, r3
 800167a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800167e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001682:	b29b      	uxth	r3, r3
 8001684:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001696:	b29c      	uxth	r4, r3
 8001698:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800169c:	b29c      	uxth	r4, r3
 800169e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80016a2:	b29c      	uxth	r4, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4ba2      	ldr	r3, [pc, #648]	; (8001934 <PCD_EP_ISR_Handler+0x52c>)
 80016aa:	4323      	orrs	r3, r4
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	8013      	strh	r3, [r2, #0]
 80016b0:	e132      	b.n	8001918 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	7d7b      	ldrb	r3, [r7, #21]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f280 80d1 	bge.w	800186e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	7d7b      	ldrb	r3, [r7, #21]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e0:	4013      	ands	r3, r2
 80016e2:	b29c      	uxth	r4, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	7d7b      	ldrb	r3, [r7, #21]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80016f4:	b292      	uxth	r2, r2
 80016f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	7b1b      	ldrb	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d121      	bne.n	8001752 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	3306      	adds	r3, #6
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001736:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d072      	beq.n	8001824 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6959      	ldr	r1, [r3, #20]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	88da      	ldrh	r2, [r3, #6]
 800174a:	8bfb      	ldrh	r3, [r7, #30]
 800174c:	f001 fedd 	bl	800350a <USB_ReadPMA>
 8001750:	e068      	b.n	8001824 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d021      	beq.n	80017b0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	3302      	adds	r3, #2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001794:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001796:	8bfb      	ldrh	r3, [r7, #30]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02a      	beq.n	80017f2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6959      	ldr	r1, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	891a      	ldrh	r2, [r3, #8]
 80017a8:	8bfb      	ldrh	r3, [r7, #30]
 80017aa:	f001 feae 	bl	800350a <USB_ReadPMA>
 80017ae:	e020      	b.n	80017f2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	3306      	adds	r3, #6
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80017da:	8bfb      	ldrh	r3, [r7, #30]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6959      	ldr	r1, [r3, #20]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	895a      	ldrh	r2, [r3, #10]
 80017ec:	8bfb      	ldrh	r3, [r7, #30]
 80017ee:	f001 fe8c 	bl	800350a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180c:	b29c      	uxth	r4, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	441a      	add	r2, r3
 800181c:	4b46      	ldr	r3, [pc, #280]	; (8001938 <PCD_EP_ISR_Handler+0x530>)
 800181e:	4323      	orrs	r3, r4
 8001820:	b29b      	uxth	r3, r3
 8001822:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	8bfb      	ldrh	r3, [r7, #30]
 800182a:	441a      	add	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	8bfb      	ldrh	r3, [r7, #30]
 8001836:	441a      	add	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <PCD_EP_ISR_Handler+0x446>
 8001844:	8bfa      	ldrh	r2, [r7, #30]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	429a      	cmp	r2, r3
 800184c:	d206      	bcs.n	800185c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f003 fa3b 	bl	8004cd0 <HAL_PCD_DataOutStageCallback>
 800185a:	e008      	b.n	800186e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	7819      	ldrb	r1, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fcb2 	bl	80011d2 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800186e:	8a7b      	ldrh	r3, [r7, #18]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04f      	beq.n	8001918 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001878:	7d7b      	ldrb	r3, [r7, #21]
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	3328      	adds	r3, #40	; 0x28
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189c:	b29c      	uxth	r4, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	441a      	add	r2, r3
 80018aa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80018ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	3302      	adds	r3, #2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	441a      	add	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f003 f9fe 	bl	8004d00 <HAL_PCD_DataInStageCallback>
 8001904:	e008      	b.n	8001918 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7819      	ldrb	r1, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fc97 	bl	8001246 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	f6ff ad74 	blt.w	8001412 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}
 8001934:	ffff8080 	.word	0xffff8080
 8001938:	ffff80c0 	.word	0xffff80c0

0800193c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	4613      	mov	r3, r2
 800194c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800194e:	897b      	ldrh	r3, [r7, #10]
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	015b      	lsls	r3, r3, #5
 8001962:	3328      	adds	r3, #40	; 0x28
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e006      	b.n	800197a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2200      	movs	r2, #0
 8001984:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29a      	uxth	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	80da      	strh	r2, [r3, #6]
 800198e:	e00b      	b.n	80019a8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2201      	movs	r2, #1
 8001994:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b29a      	uxth	r2, r3
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e26c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8087 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d4:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4b8f      	ldr	r3, [pc, #572]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d112      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
 80019ec:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b89      	ldr	r3, [pc, #548]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d06c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d168      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e246      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x76>
 8001a1c:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a7f      	ldr	r2, [pc, #508]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e02e      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x98>
 8001a32:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7a      	ldr	r2, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a77      	ldr	r2, [pc, #476]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e01d      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0xbc>
 8001a56:	4b72      	ldr	r3, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a71      	ldr	r2, [pc, #452]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e00b      	b.n	8001a88 <HAL_RCC_OscConfig+0xd4>
 8001a70:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6a      	ldr	r2, [pc, #424]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a67      	ldr	r2, [pc, #412]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7fe fe18 	bl	80006c4 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7fe fe14 	bl	80006c4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1fa      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe4>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fe04 	bl	80006c4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fe00 	bl	80006c4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e1e6      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x10c>
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d063      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001afa:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d11c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e1ba      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4939      	ldr	r1, [pc, #228]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	e03a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b48:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe fdb9 	bl	80006c4 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7fe fdb5 	bl	80006c4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e19b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4927      	ldr	r1, [pc, #156]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fd98 	bl	80006c4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b98:	f7fe fd94 	bl	80006c4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e17a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d03a      	beq.n	8001c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7fe fd78 	bl	80006c4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fd74 	bl	80006c4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e15a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f000 faa8 	bl	800214c <RCC_Delay>
 8001bfc:	e01c      	b.n	8001c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7fe fd5e 	bl	80006c4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	e00f      	b.n	8001c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fd5a 	bl	80006c4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d908      	bls.n	8001c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e140      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	42420000 	.word	0x42420000
 8001c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e9      	bne.n	8001c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a6 	beq.w	8001d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b97      	ldr	r3, [pc, #604]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a93      	ldr	r2, [pc, #588]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b91      	ldr	r3, [pc, #580]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b8e      	ldr	r3, [pc, #568]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8a      	ldr	r2, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7fe fd1b 	bl	80006c4 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7fe fd17 	bl	80006c4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0fd      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x312>
 8001cb8:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a7a      	ldr	r2, [pc, #488]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	e02d      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x334>
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	e01c      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x356>
 8001cf0:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a6c      	ldr	r2, [pc, #432]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x36e>
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a66      	ldr	r2, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a63      	ldr	r2, [pc, #396]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe fccb 	bl	80006c4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe fcc7 	bl	80006c4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0ab      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ee      	beq.n	8001d32 <HAL_RCC_OscConfig+0x37e>
 8001d54:	e014      	b.n	8001d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe fcb5 	bl	80006c4 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fcb1 	bl	80006c4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e095      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ee      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d80:	7dfb      	ldrb	r3, [r7, #23]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8081 	beq.w	8001e9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d061      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d146      	bne.n	8001e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_OscConfig+0x4fc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe fc85 	bl	80006c4 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7fe fc81 	bl	80006c4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e067      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	492d      	ldr	r1, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a19      	ldr	r1, [r3, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	4927      	ldr	r1, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x4fc>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe fc55 	bl	80006c4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe fc51 	bl	80006c4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e037      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x46a>
 8001e3c:	e02f      	b.n	8001e9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_RCC_OscConfig+0x4fc>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fc3e 	bl	80006c4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fc3a 	bl	80006c4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e020      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x498>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e013      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	42420060 	.word	0x42420060

08001eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0d0      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4965      	ldr	r1, [pc, #404]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0b8      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a58      	ldr	r2, [pc, #352]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	494d      	ldr	r1, [pc, #308]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d040      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d115      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e07f      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e073      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06b      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4936      	ldr	r1, [pc, #216]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7fe fb8e 	bl	80006c4 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7fe fb8a 	bl	80006c4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e053      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d210      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4922      	ldr	r1, [pc, #136]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e032      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	490e      	ldr	r1, [pc, #56]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002042:	f000 f821 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002046:	4601      	mov	r1, r0
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	fa21 f303 	lsr.w	r3, r1, r3
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1cc>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x1d0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe faec 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	0800521c 	.word	0x0800521c
 8002080:	20000000 	.word	0x20000000
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	b490      	push	{r4, r7}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002090:	1d3c      	adds	r4, r7, #4
 8002092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_RCC_GetSysClockFreq+0xb4>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x40>
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x46>
 80020c6:	e02d      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c8:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ca:	623b      	str	r3, [r7, #32]
      break;
 80020cc:	e02d      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020da:	4413      	add	r3, r2
 80020dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c5b      	lsrs	r3, r3, #17
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020fa:	4413      	add	r3, r2
 80020fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002100:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002106:	fb02 f203 	mul.w	r2, r2, r3
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	e004      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	623b      	str	r3, [r7, #32]
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002126:	623b      	str	r3, [r7, #32]
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	6a3b      	ldr	r3, [r7, #32]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bc90      	pop	{r4, r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	080051c0 	.word	0x080051c0
 800213c:	080051d0 	.word	0x080051d0
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	003d0900 	.word	0x003d0900

0800214c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <RCC_Delay+0x34>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <RCC_Delay+0x38>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0a5b      	lsrs	r3, r3, #9
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002168:	bf00      	nop
  }
  while (Delay --);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	60fa      	str	r2, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <RCC_Delay+0x1c>
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d07d      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a8:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	61d3      	str	r3, [r2, #28]
 80021c0:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d118      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a42      	ldr	r2, [pc, #264]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fa6c 	bl	80006c4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7fe fa68 	bl	80006c4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e06d      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d02e      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d027      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002234:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe fa37 	bl	80006c4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fa33 	bl	80006c4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e036      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4917      	ldr	r1, [pc, #92]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	4313      	orrs	r3, r2
 800228c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	490b      	ldr	r1, [pc, #44]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4904      	ldr	r1, [pc, #16]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42420440 	.word	0x42420440

080022f4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022f4:	b084      	sub	sp, #16
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	f107 0014 	add.w	r0, r7, #20
 8002302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	b004      	add	sp, #16
 8002312:	4770      	bx	lr

08002314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800231c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002320:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002328:	b29a      	uxth	r2, r3
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	4313      	orrs	r3, r2
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800234a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800234e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002356:	b29b      	uxth	r3, r3
 8002358:	b21a      	sxth	r2, r3
 800235a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800235e:	43db      	mvns	r3, r3
 8002360:	b21b      	sxth	r3, r3
 8002362:	4013      	ands	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002392:	b084      	sub	sp, #16
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	f107 0014 	add.w	r0, r7, #20
 80023a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffa5 	bl	8002314 <USB_EnableGlobalInt>

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023d6:	b004      	add	sp, #16
 80023d8:	4770      	bx	lr
	...

080023dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80023dc:	b490      	push	{r4, r7}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	78db      	ldrb	r3, [r3, #3]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d819      	bhi.n	800243e <USB_ActivateEndpoint+0x62>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <USB_ActivateEndpoint+0x34>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002421 	.word	0x08002421
 8002414:	08002435 	.word	0x08002435
 8002418:	08002445 	.word	0x08002445
 800241c:	0800242b 	.word	0x0800242b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002420:	89bb      	ldrh	r3, [r7, #12]
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	81bb      	strh	r3, [r7, #12]
      break;
 8002428:	e00d      	b.n	8002446 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800242a:	89bb      	ldrh	r3, [r7, #12]
 800242c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002430:	81bb      	strh	r3, [r7, #12]
      break;
 8002432:	e008      	b.n	8002446 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002434:	89bb      	ldrh	r3, [r7, #12]
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	81bb      	strh	r3, [r7, #12]
      break;
 800243c:	e003      	b.n	8002446 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e000      	b.n	8002446 <USB_ActivateEndpoint+0x6a>
      break;
 8002444:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	441a      	add	r2, r3
 8002450:	89bb      	ldrh	r3, [r7, #12]
 8002452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	b29a      	uxth	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b29c      	uxth	r4, r3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	441a      	add	r2, r3
 8002492:	4b8a      	ldr	r3, [pc, #552]	; (80026bc <USB_ActivateEndpoint+0x2e0>)
 8002494:	4323      	orrs	r3, r4
 8002496:	b29b      	uxth	r3, r3
 8002498:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7b1b      	ldrb	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 8112 	bne.w	80026c8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d067      	beq.n	800257c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80024ac:	687c      	ldr	r4, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	441c      	add	r4, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4423      	add	r3, r4
 80024c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c4:	461c      	mov	r4, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	88db      	ldrh	r3, [r3, #6]
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29c      	uxth	r4, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <USB_ActivateEndpoint+0x13a>
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	b29c      	uxth	r4, r3
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	441a      	add	r2, r3
 800250e:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <USB_ActivateEndpoint+0x2e4>)
 8002510:	4323      	orrs	r3, r4
 8002512:	b29b      	uxth	r3, r3
 8002514:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	78db      	ldrb	r3, [r3, #3]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d018      	beq.n	8002550 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	b29c      	uxth	r4, r3
 8002536:	f084 0320 	eor.w	r3, r4, #32
 800253a:	b29c      	uxth	r4, r3
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	441a      	add	r2, r3
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <USB_ActivateEndpoint+0x2e0>)
 8002548:	4323      	orrs	r3, r4
 800254a:	b29b      	uxth	r3, r3
 800254c:	8013      	strh	r3, [r2, #0]
 800254e:	e22b      	b.n	80029a8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002566:	b29c      	uxth	r4, r3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	4b52      	ldr	r3, [pc, #328]	; (80026bc <USB_ActivateEndpoint+0x2e0>)
 8002574:	4323      	orrs	r3, r4
 8002576:	b29b      	uxth	r3, r3
 8002578:	8013      	strh	r3, [r2, #0]
 800257a:	e215      	b.n	80029a8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800257c:	687c      	ldr	r4, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002584:	b29b      	uxth	r3, r3
 8002586:	441c      	add	r4, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	4423      	add	r3, r4
 8002590:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002594:	461c      	mov	r4, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	88db      	ldrh	r3, [r3, #6]
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025a4:	687c      	ldr	r4, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	441c      	add	r4, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4423      	add	r3, r4
 80025b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025bc:	461c      	mov	r4, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10e      	bne.n	80025e4 <USB_ActivateEndpoint+0x208>
 80025c6:	8823      	ldrh	r3, [r4, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8023      	strh	r3, [r4, #0]
 80025d2:	8823      	ldrh	r3, [r4, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025de:	b29b      	uxth	r3, r3
 80025e0:	8023      	strh	r3, [r4, #0]
 80025e2:	e02d      	b.n	8002640 <USB_ActivateEndpoint+0x264>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b3e      	cmp	r3, #62	; 0x3e
 80025ea:	d812      	bhi.n	8002612 <USB_ActivateEndpoint+0x236>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <USB_ActivateEndpoint+0x22a>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	b29b      	uxth	r3, r3
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	b29b      	uxth	r3, r3
 800260e:	8023      	strh	r3, [r4, #0]
 8002610:	e016      	b.n	8002640 <USB_ActivateEndpoint+0x264>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <USB_ActivateEndpoint+0x250>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	b29b      	uxth	r3, r3
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	b29b      	uxth	r3, r3
 8002634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800263c:	b29b      	uxth	r3, r3
 800263e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29c      	uxth	r4, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <USB_ActivateEndpoint+0x2a6>
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	b29c      	uxth	r4, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <USB_ActivateEndpoint+0x2e8>)
 800267c:	4323      	orrs	r3, r4
 800267e:	b29b      	uxth	r3, r3
 8002680:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	b29c      	uxth	r4, r3
 800269a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800269e:	b29c      	uxth	r4, r3
 80026a0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80026a4:	b29c      	uxth	r4, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	441a      	add	r2, r3
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <USB_ActivateEndpoint+0x2e0>)
 80026b2:	4323      	orrs	r3, r4
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8013      	strh	r3, [r2, #0]
 80026b8:	e176      	b.n	80029a8 <USB_ActivateEndpoint+0x5cc>
 80026ba:	bf00      	nop
 80026bc:	ffff8080 	.word	0xffff8080
 80026c0:	ffff80c0 	.word	0xffff80c0
 80026c4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	b29c      	uxth	r4, r3
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	4b96      	ldr	r3, [pc, #600]	; (8002944 <USB_ActivateEndpoint+0x568>)
 80026ec:	4323      	orrs	r3, r4
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026f2:	687c      	ldr	r4, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	441c      	add	r4, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4423      	add	r3, r4
 8002706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800270a:	461c      	mov	r4, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	891b      	ldrh	r3, [r3, #8]
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	8023      	strh	r3, [r4, #0]
 800271a:	687c      	ldr	r4, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002722:	b29b      	uxth	r3, r3
 8002724:	441c      	add	r4, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	4423      	add	r3, r4
 800272e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002732:	461c      	mov	r4, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	895b      	ldrh	r3, [r3, #10]
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	b29b      	uxth	r3, r3
 8002740:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8088 	bne.w	800285c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29c      	uxth	r4, r3
 800275a:	4623      	mov	r3, r4
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <USB_ActivateEndpoint+0x3b2>
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	b29c      	uxth	r4, r3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <USB_ActivateEndpoint+0x56c>)
 8002788:	4323      	orrs	r3, r4
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29c      	uxth	r4, r3
 800279c:	4623      	mov	r3, r4
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d014      	beq.n	80027d0 <USB_ActivateEndpoint+0x3f4>
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027bc:	b29c      	uxth	r4, r3
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	441a      	add	r2, r3
 80027c8:	4b60      	ldr	r3, [pc, #384]	; (800294c <USB_ActivateEndpoint+0x570>)
 80027ca:	4323      	orrs	r3, r4
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	b29c      	uxth	r4, r3
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <USB_ActivateEndpoint+0x570>)
 80027f4:	4323      	orrs	r3, r4
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	b29c      	uxth	r4, r3
 8002812:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002816:	b29c      	uxth	r4, r3
 8002818:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800281c:	b29c      	uxth	r4, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	4b49      	ldr	r3, [pc, #292]	; (8002950 <USB_ActivateEndpoint+0x574>)
 800282a:	4323      	orrs	r3, r4
 800282c:	b29b      	uxth	r3, r3
 800282e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002846:	b29c      	uxth	r4, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <USB_ActivateEndpoint+0x574>)
 8002854:	4323      	orrs	r3, r4
 8002856:	b29b      	uxth	r3, r3
 8002858:	8013      	strh	r3, [r2, #0]
 800285a:	e0a5      	b.n	80029a8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29c      	uxth	r4, r3
 800286a:	4623      	mov	r3, r4
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d014      	beq.n	800289e <USB_ActivateEndpoint+0x4c2>
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	b29c      	uxth	r4, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <USB_ActivateEndpoint+0x56c>)
 8002898:	4323      	orrs	r3, r4
 800289a:	b29b      	uxth	r3, r3
 800289c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29c      	uxth	r4, r3
 80028ac:	4623      	mov	r3, r4
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <USB_ActivateEndpoint+0x504>
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	b29c      	uxth	r4, r3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <USB_ActivateEndpoint+0x570>)
 80028da:	4323      	orrs	r3, r4
 80028dc:	b29b      	uxth	r3, r3
 80028de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	b29c      	uxth	r4, r3
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <USB_ActivateEndpoint+0x56c>)
 8002904:	4323      	orrs	r3, r4
 8002906:	b29b      	uxth	r3, r3
 8002908:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	78db      	ldrb	r3, [r3, #3]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d020      	beq.n	8002954 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002928:	b29c      	uxth	r4, r3
 800292a:	f084 0320 	eor.w	r3, r4, #32
 800292e:	b29c      	uxth	r4, r3
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <USB_ActivateEndpoint+0x574>)
 800293c:	4323      	orrs	r3, r4
 800293e:	b29b      	uxth	r3, r3
 8002940:	8013      	strh	r3, [r2, #0]
 8002942:	e01c      	b.n	800297e <USB_ActivateEndpoint+0x5a2>
 8002944:	ffff8180 	.word	0xffff8180
 8002948:	ffffc080 	.word	0xffffc080
 800294c:	ffff80c0 	.word	0xffff80c0
 8002950:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296a:	b29c      	uxth	r4, r3
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <USB_ActivateEndpoint+0x5d8>)
 8002978:	4323      	orrs	r3, r4
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	b29c      	uxth	r4, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <USB_ActivateEndpoint+0x5d8>)
 80029a2:	4323      	orrs	r3, r4
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc90      	pop	{r4, r7}
 80029b2:	4770      	bx	lr
 80029b4:	ffff8080 	.word	0xffff8080

080029b8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80029b8:	b490      	push	{r4, r7}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7b1b      	ldrb	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d171      	bne.n	8002aae <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d036      	beq.n	8002a40 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29c      	uxth	r4, r3
 80029e0:	4623      	mov	r3, r4
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d014      	beq.n	8002a14 <USB_DeactivateEndpoint+0x5c>
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a00:	b29c      	uxth	r4, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	441a      	add	r2, r3
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	; (8002bbc <USB_DeactivateEndpoint+0x204>)
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2a:	b29c      	uxth	r4, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <USB_DeactivateEndpoint+0x208>)
 8002a38:	4323      	orrs	r3, r4
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	8013      	strh	r3, [r2, #0]
 8002a3e:	e144      	b.n	8002cca <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29c      	uxth	r4, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <USB_DeactivateEndpoint+0xca>
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	b29c      	uxth	r4, r3
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <USB_DeactivateEndpoint+0x20c>)
 8002a7c:	4323      	orrs	r3, r4
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	b29c      	uxth	r4, r3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	441a      	add	r2, r3
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <USB_DeactivateEndpoint+0x208>)
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	8013      	strh	r3, [r2, #0]
 8002aac:	e10d      	b.n	8002cca <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	785b      	ldrb	r3, [r3, #1]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8088 	bne.w	8002bc8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29c      	uxth	r4, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d014      	beq.n	8002afa <USB_DeactivateEndpoint+0x142>
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	b29c      	uxth	r4, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <USB_DeactivateEndpoint+0x20c>)
 8002af4:	4323      	orrs	r3, r4
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29c      	uxth	r4, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d014      	beq.n	8002b3c <USB_DeactivateEndpoint+0x184>
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	b29c      	uxth	r4, r3
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <USB_DeactivateEndpoint+0x204>)
 8002b36:	4323      	orrs	r3, r4
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	b29c      	uxth	r4, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <USB_DeactivateEndpoint+0x204>)
 8002b60:	4323      	orrs	r3, r4
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	b29c      	uxth	r4, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <USB_DeactivateEndpoint+0x208>)
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba6:	b29c      	uxth	r4, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <USB_DeactivateEndpoint+0x208>)
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	8013      	strh	r3, [r2, #0]
 8002bba:	e086      	b.n	8002cca <USB_DeactivateEndpoint+0x312>
 8002bbc:	ffff80c0 	.word	0xffff80c0
 8002bc0:	ffff8080 	.word	0xffff8080
 8002bc4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29c      	uxth	r4, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d014      	beq.n	8002c0a <USB_DeactivateEndpoint+0x252>
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	b29c      	uxth	r4, r3
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <USB_DeactivateEndpoint+0x320>)
 8002c04:	4323      	orrs	r3, r4
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29c      	uxth	r4, r3
 8002c18:	4623      	mov	r3, r4
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d014      	beq.n	8002c4c <USB_DeactivateEndpoint+0x294>
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	b29c      	uxth	r4, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <USB_DeactivateEndpoint+0x324>)
 8002c46:	4323      	orrs	r3, r4
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	b29c      	uxth	r4, r3
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <USB_DeactivateEndpoint+0x320>)
 8002c70:	4323      	orrs	r3, r4
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	b29c      	uxth	r4, r3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <USB_DeactivateEndpoint+0x328>)
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	b29c      	uxth	r4, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <USB_DeactivateEndpoint+0x328>)
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc90      	pop	{r4, r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	ffffc080 	.word	0xffffc080
 8002cdc:	ffff80c0 	.word	0xffff80c0
 8002ce0:	ffff8080 	.word	0xffff8080

08002ce4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b08d      	sub	sp, #52	; 0x34
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 8160 	bne.w	8002fb8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d909      	bls.n	8002d18 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	1ad2      	subs	r2, r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	619a      	str	r2, [r3, #24]
 8002d16:	e005      	b.n	8002d24 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7b1b      	ldrb	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d119      	bne.n	8002d60 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	88da      	ldrh	r2, [r3, #6]
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fba2 	bl	8003482 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d3e:	687c      	ldr	r4, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	441c      	add	r4, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	4423      	add	r3, r4
 8002d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d56:	461c      	mov	r4, r3
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8023      	strh	r3, [r4, #0]
 8002d5e:	e10f      	b.n	8002f80 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d065      	beq.n	8002e42 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002d76:	687c      	ldr	r4, [r7, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d148      	bne.n	8002e12 <USB_EPStartXfer+0x12e>
 8002d80:	687c      	ldr	r4, [r7, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	441c      	add	r4, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4423      	add	r3, r4
 8002d94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d98:	461c      	mov	r4, r3
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10e      	bne.n	8002dbe <USB_EPStartXfer+0xda>
 8002da0:	8823      	ldrh	r3, [r4, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8023      	strh	r3, [r4, #0]
 8002dac:	8823      	ldrh	r3, [r4, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	8023      	strh	r3, [r4, #0]
 8002dbc:	e03d      	b.n	8002e3a <USB_EPStartXfer+0x156>
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8002dc2:	d810      	bhi.n	8002de6 <USB_EPStartXfer+0x102>
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <USB_EPStartXfer+0xf6>
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	8023      	strh	r3, [r4, #0]
 8002de4:	e029      	b.n	8002e3a <USB_EPStartXfer+0x156>
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <USB_EPStartXfer+0x118>
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	029b      	lsls	r3, r3, #10
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8023      	strh	r3, [r4, #0]
 8002e10:	e013      	b.n	8002e3a <USB_EPStartXfer+0x156>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10f      	bne.n	8002e3a <USB_EPStartXfer+0x156>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	441c      	add	r4, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4423      	add	r3, r4
 8002e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	895b      	ldrh	r3, [r3, #10]
 8002e3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002e40:	e063      	b.n	8002f0a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d148      	bne.n	8002edc <USB_EPStartXfer+0x1f8>
 8002e4a:	687c      	ldr	r4, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	441c      	add	r4, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4423      	add	r3, r4
 8002e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e62:	461c      	mov	r4, r3
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10e      	bne.n	8002e88 <USB_EPStartXfer+0x1a4>
 8002e6a:	8823      	ldrh	r3, [r4, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8023      	strh	r3, [r4, #0]
 8002e76:	8823      	ldrh	r3, [r4, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8023      	strh	r3, [r4, #0]
 8002e86:	e03d      	b.n	8002f04 <USB_EPStartXfer+0x220>
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e8c:	d810      	bhi.n	8002eb0 <USB_EPStartXfer+0x1cc>
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <USB_EPStartXfer+0x1c0>
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8023      	strh	r3, [r4, #0]
 8002eae:	e029      	b.n	8002f04 <USB_EPStartXfer+0x220>
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <USB_EPStartXfer+0x1e2>
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	029b      	lsls	r3, r3, #10
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	8023      	strh	r3, [r4, #0]
 8002eda:	e013      	b.n	8002f04 <USB_EPStartXfer+0x220>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10f      	bne.n	8002f04 <USB_EPStartXfer+0x220>
 8002ee4:	687c      	ldr	r4, [r7, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	441c      	add	r4, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4423      	add	r3, r4
 8002ef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002efc:	461c      	mov	r4, r3
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	891b      	ldrh	r3, [r3, #8]
 8002f08:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6959      	ldr	r1, [r3, #20]
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fab4 	bl	8003482 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <USB_EPStartXfer+0x26a>
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f38:	b29c      	uxth	r4, r3
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	4b9a      	ldr	r3, [pc, #616]	; (80031b0 <USB_EPStartXfer+0x4cc>)
 8002f46:	4323      	orrs	r3, r4
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]
 8002f4c:	e018      	b.n	8002f80 <USB_EPStartXfer+0x29c>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d114      	bne.n	8002f80 <USB_EPStartXfer+0x29c>
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	b29c      	uxth	r4, r3
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	4b8e      	ldr	r3, [pc, #568]	; (80031b4 <USB_EPStartXfer+0x4d0>)
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f96:	b29c      	uxth	r4, r3
 8002f98:	f084 0310 	eor.w	r3, r4, #16
 8002f9c:	b29c      	uxth	r4, r3
 8002f9e:	f084 0320 	eor.w	r3, r4, #32
 8002fa2:	b29c      	uxth	r4, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <USB_EPStartXfer+0x4d4>)
 8002fb0:	4323      	orrs	r3, r4
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8013      	strh	r3, [r2, #0]
 8002fb6:	e146      	b.n	8003246 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d909      	bls.n	8002fd8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	619a      	str	r2, [r3, #24]
 8002fd6:	e005      	b.n	8002fe4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	7b1b      	ldrb	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d148      	bne.n	800307e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002fec:	687c      	ldr	r4, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	441c      	add	r4, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4423      	add	r3, r4
 8003000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003004:	461c      	mov	r4, r3
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <USB_EPStartXfer+0x346>
 800300c:	8823      	ldrh	r3, [r4, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003014:	b29b      	uxth	r3, r3
 8003016:	8023      	strh	r3, [r4, #0]
 8003018:	8823      	ldrh	r3, [r4, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003024:	b29b      	uxth	r3, r3
 8003026:	8023      	strh	r3, [r4, #0]
 8003028:	e0f2      	b.n	8003210 <USB_EPStartXfer+0x52c>
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	2b3e      	cmp	r3, #62	; 0x3e
 800302e:	d810      	bhi.n	8003052 <USB_EPStartXfer+0x36e>
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <USB_EPStartXfer+0x362>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	3301      	adds	r3, #1
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	b29b      	uxth	r3, r3
 800304a:	029b      	lsls	r3, r3, #10
 800304c:	b29b      	uxth	r3, r3
 800304e:	8023      	strh	r3, [r4, #0]
 8003050:	e0de      	b.n	8003210 <USB_EPStartXfer+0x52c>
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <USB_EPStartXfer+0x384>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b01      	subs	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	b29b      	uxth	r3, r3
 800306c:	029b      	lsls	r3, r3, #10
 800306e:	b29b      	uxth	r3, r3
 8003070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003078:	b29b      	uxth	r3, r3
 800307a:	8023      	strh	r3, [r4, #0]
 800307c:	e0c8      	b.n	8003210 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d148      	bne.n	8003118 <USB_EPStartXfer+0x434>
 8003086:	687c      	ldr	r4, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	441c      	add	r4, r3
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	4423      	add	r3, r4
 800309a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800309e:	461c      	mov	r4, r3
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10e      	bne.n	80030c4 <USB_EPStartXfer+0x3e0>
 80030a6:	8823      	ldrh	r3, [r4, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8023      	strh	r3, [r4, #0]
 80030b2:	8823      	ldrh	r3, [r4, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030be:	b29b      	uxth	r3, r3
 80030c0:	8023      	strh	r3, [r4, #0]
 80030c2:	e03d      	b.n	8003140 <USB_EPStartXfer+0x45c>
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	2b3e      	cmp	r3, #62	; 0x3e
 80030c8:	d810      	bhi.n	80030ec <USB_EPStartXfer+0x408>
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <USB_EPStartXfer+0x3fc>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3301      	adds	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	029b      	lsls	r3, r3, #10
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8023      	strh	r3, [r4, #0]
 80030ea:	e029      	b.n	8003140 <USB_EPStartXfer+0x45c>
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <USB_EPStartXfer+0x41e>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	3b01      	subs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	b29b      	uxth	r3, r3
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	b29b      	uxth	r3, r3
 800310a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800310e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003112:	b29b      	uxth	r3, r3
 8003114:	8023      	strh	r3, [r4, #0]
 8003116:	e013      	b.n	8003140 <USB_EPStartXfer+0x45c>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10f      	bne.n	8003140 <USB_EPStartXfer+0x45c>
 8003120:	687c      	ldr	r4, [r7, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	441c      	add	r4, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	4423      	add	r3, r4
 8003134:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003138:	461c      	mov	r4, r3
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	b29b      	uxth	r3, r3
 800313e:	8023      	strh	r3, [r4, #0]
 8003140:	687c      	ldr	r4, [r7, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d14e      	bne.n	80031e8 <USB_EPStartXfer+0x504>
 800314a:	687c      	ldr	r4, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	441c      	add	r4, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4423      	add	r3, r4
 800315e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003162:	461c      	mov	r4, r3
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10e      	bne.n	8003188 <USB_EPStartXfer+0x4a4>
 800316a:	8823      	ldrh	r3, [r4, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003172:	b29b      	uxth	r3, r3
 8003174:	8023      	strh	r3, [r4, #0]
 8003176:	8823      	ldrh	r3, [r4, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29b      	uxth	r3, r3
 8003184:	8023      	strh	r3, [r4, #0]
 8003186:	e043      	b.n	8003210 <USB_EPStartXfer+0x52c>
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	2b3e      	cmp	r3, #62	; 0x3e
 800318c:	d816      	bhi.n	80031bc <USB_EPStartXfer+0x4d8>
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <USB_EPStartXfer+0x4c0>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	029b      	lsls	r3, r3, #10
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8023      	strh	r3, [r4, #0]
 80031ae:	e02f      	b.n	8003210 <USB_EPStartXfer+0x52c>
 80031b0:	ffff80c0 	.word	0xffff80c0
 80031b4:	ffffc080 	.word	0xffffc080
 80031b8:	ffff8080 	.word	0xffff8080
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <USB_EPStartXfer+0x4ee>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	029b      	lsls	r3, r3, #10
 80031d8:	b29b      	uxth	r3, r3
 80031da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8023      	strh	r3, [r4, #0]
 80031e6:	e013      	b.n	8003210 <USB_EPStartXfer+0x52c>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d10f      	bne.n	8003210 <USB_EPStartXfer+0x52c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	441c      	add	r4, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	4423      	add	r3, r4
 8003202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	b29a      	uxth	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	b29c      	uxth	r4, r3
 8003228:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800322c:	b29c      	uxth	r4, r3
 800322e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003232:	b29c      	uxth	r4, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <USB_EPStartXfer+0x56c>)
 8003240:	4323      	orrs	r3, r4
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3734      	adds	r7, #52	; 0x34
 800324c:	46bd      	mov	sp, r7
 800324e:	bd90      	pop	{r4, r7, pc}
 8003250:	ffff8080 	.word	0xffff8080

08003254 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003254:	b490      	push	{r4, r7}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d018      	beq.n	8003298 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327c:	b29c      	uxth	r4, r3
 800327e:	f084 0310 	eor.w	r3, r4, #16
 8003282:	b29c      	uxth	r4, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <USB_EPSetStall+0x80>)
 8003290:	4323      	orrs	r3, r4
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
 8003296:	e017      	b.n	80032c8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	b29c      	uxth	r4, r3
 80032b0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032b4:	b29c      	uxth	r4, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <USB_EPSetStall+0x80>)
 80032c2:	4323      	orrs	r3, r4
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc90      	pop	{r4, r7}
 80032d2:	4770      	bx	lr
 80032d4:	ffff8080 	.word	0xffff8080

080032d8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032d8:	b490      	push	{r4, r7}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d17d      	bne.n	80033e6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03d      	beq.n	800336e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29c      	uxth	r4, r3
 8003300:	4623      	mov	r3, r4
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d014      	beq.n	8003334 <USB_EPClearStall+0x5c>
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	b29c      	uxth	r4, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <USB_EPClearStall+0x11c>)
 800332e:	4323      	orrs	r3, r4
 8003330:	b29b      	uxth	r3, r3
 8003332:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	78db      	ldrb	r3, [r3, #3]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d054      	beq.n	80033e6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003352:	b29c      	uxth	r4, r3
 8003354:	f084 0320 	eor.w	r3, r4, #32
 8003358:	b29c      	uxth	r4, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <USB_EPClearStall+0x120>)
 8003366:	4323      	orrs	r3, r4
 8003368:	b29b      	uxth	r3, r3
 800336a:	8013      	strh	r3, [r2, #0]
 800336c:	e03b      	b.n	80033e6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29c      	uxth	r4, r3
 800337c:	4623      	mov	r3, r4
 800337e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d014      	beq.n	80033b0 <USB_EPClearStall+0xd8>
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	b29c      	uxth	r4, r3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	441a      	add	r2, r3
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <USB_EPClearStall+0x124>)
 80033aa:	4323      	orrs	r3, r4
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	b29c      	uxth	r4, r3
 80033c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033cc:	b29c      	uxth	r4, r3
 80033ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033d2:	b29c      	uxth	r4, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <USB_EPClearStall+0x120>)
 80033e0:	4323      	orrs	r3, r4
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc90      	pop	{r4, r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	ffff80c0 	.word	0xffff80c0
 80033f8:	ffff8080 	.word	0xffff8080
 80033fc:	ffffc080 	.word	0xffffc080

08003400 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345c:	b29b      	uxth	r3, r3
 800345e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003460:	68fb      	ldr	r3, [r7, #12]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003482:	b480      	push	{r7}
 8003484:	b08d      	sub	sp, #52	; 0x34
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	4611      	mov	r1, r2
 800348e:	461a      	mov	r2, r3
 8003490:	460b      	mov	r3, r1
 8003492:	80fb      	strh	r3, [r7, #6]
 8003494:	4613      	mov	r3, r2
 8003496:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003498:	88bb      	ldrh	r3, [r7, #4]
 800349a:	3301      	adds	r3, #1
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	e01e      	b.n	80034fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	3302      	adds	r3, #2
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	3302      	adds	r3, #2
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	3b01      	subs	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1dd      	bne.n	80034bc <USB_WritePMA+0x3a>
  }
}
 8003500:	bf00      	nop
 8003502:	3734      	adds	r7, #52	; 0x34
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800350a:	b480      	push	{r7}
 800350c:	b08b      	sub	sp, #44	; 0x2c
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	4611      	mov	r1, r2
 8003516:	461a      	mov	r2, r3
 8003518:	460b      	mov	r3, r1
 800351a:	80fb      	strh	r3, [r7, #6]
 800351c:	4613      	mov	r3, r2
 800351e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003520:	88bb      	ldrh	r3, [r7, #4]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	005a      	lsls	r2, r3, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	e01b      	b.n	800357c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	3302      	adds	r3, #2
 8003550:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3301      	adds	r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b2da      	uxtb	r2, r3
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	3302      	adds	r3, #2
 8003574:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	3b01      	subs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e0      	bne.n	8003544 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003582:	88bb      	ldrh	r3, [r7, #4]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	701a      	strb	r2, [r3, #0]
  }
}
 800359e:	bf00      	nop
 80035a0:	372c      	adds	r7, #44	; 0x2c
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80035b4:	2304      	movs	r3, #4
 80035b6:	2203      	movs	r2, #3
 80035b8:	2181      	movs	r1, #129	; 0x81
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 fc6f 	bl	8004e9e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80035c6:	2010      	movs	r0, #16
 80035c8:	f001 fd76 	bl	80050b8 <USBD_static_malloc>
 80035cc:	4602      	mov	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80035de:	2302      	movs	r3, #2
 80035e0:	e005      	b.n	80035ee <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035e8:	2200      	movs	r2, #0
 80035ea:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003602:	2181      	movs	r1, #129	; 0x81
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 fc70 	bl	8004eea <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fd55 	bl	80050d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003648:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003662:	2b00      	cmp	r3, #0
 8003664:	d045      	beq.n	80036f2 <USBD_HID_Setup+0xba>
 8003666:	2b20      	cmp	r3, #32
 8003668:	f040 80d3 	bne.w	8003812 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	3b02      	subs	r3, #2
 8003672:	2b09      	cmp	r3, #9
 8003674:	d835      	bhi.n	80036e2 <USBD_HID_Setup+0xaa>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <USBD_HID_Setup+0x44>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036d3 	.word	0x080036d3
 8003680:	080036b3 	.word	0x080036b3
 8003684:	080036e3 	.word	0x080036e3
 8003688:	080036e3 	.word	0x080036e3
 800368c:	080036e3 	.word	0x080036e3
 8003690:	080036e3 	.word	0x080036e3
 8003694:	080036e3 	.word	0x080036e3
 8003698:	080036e3 	.word	0x080036e3
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036a5 	.word	0x080036a5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	885b      	ldrh	r3, [r3, #2]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	601a      	str	r2, [r3, #0]
          break;
 80036b0:	e01e      	b.n	80036f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f001 f937 	bl	800492c <USBD_CtlSendData>
          break;
 80036be:	e017      	b.n	80036f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	885b      	ldrh	r3, [r3, #2]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]
          break;
 80036d0:	e00e      	b.n	80036f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2201      	movs	r2, #1
 80036d8:	4619      	mov	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 f926 	bl	800492c <USBD_CtlSendData>
          break;
 80036e0:	e006      	b.n	80036f0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 f8b7 	bl	8004858 <USBD_CtlError>
          ret = USBD_FAIL;
 80036ea:	2302      	movs	r3, #2
 80036ec:	75fb      	strb	r3, [r7, #23]
          break;
 80036ee:	bf00      	nop
      }
      break;
 80036f0:	e096      	b.n	8003820 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b0b      	cmp	r3, #11
 80036f8:	f200 8083 	bhi.w	8003802 <USBD_HID_Setup+0x1ca>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <USBD_HID_Setup+0xcc>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003735 	.word	0x08003735
 8003708:	08003803 	.word	0x08003803
 800370c:	08003803 	.word	0x08003803
 8003710:	08003803 	.word	0x08003803
 8003714:	08003803 	.word	0x08003803
 8003718:	08003803 	.word	0x08003803
 800371c:	0800375d 	.word	0x0800375d
 8003720:	08003803 	.word	0x08003803
 8003724:	08003803 	.word	0x08003803
 8003728:	08003803 	.word	0x08003803
 800372c:	080037b5 	.word	0x080037b5
 8003730:	080037dd 	.word	0x080037dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800373e:	f107 030e 	add.w	r3, r7, #14
 8003742:	2202      	movs	r2, #2
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f001 f8f0 	bl	800492c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800374c:	e060      	b.n	8003810 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f001 f881 	bl	8004858 <USBD_CtlError>
            ret = USBD_FAIL;
 8003756:	2302      	movs	r3, #2
 8003758:	75fb      	strb	r3, [r7, #23]
          break;
 800375a:	e059      	b.n	8003810 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	885b      	ldrh	r3, [r3, #2]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b22      	cmp	r3, #34	; 0x22
 8003766:	d108      	bne.n	800377a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	88db      	ldrh	r3, [r3, #6]
 800376c:	2b3f      	cmp	r3, #63	; 0x3f
 800376e:	bf28      	it	cs
 8003770:	233f      	movcs	r3, #63	; 0x3f
 8003772:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <USBD_HID_Setup+0x1f4>)
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e015      	b.n	80037a6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	885b      	ldrh	r3, [r3, #2]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b21      	cmp	r3, #33	; 0x21
 8003784:	d108      	bne.n	8003798 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <USBD_HID_Setup+0x1f8>)
 8003788:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	88db      	ldrh	r3, [r3, #6]
 800378e:	2b09      	cmp	r3, #9
 8003790:	bf28      	it	cs
 8003792:	2309      	movcs	r3, #9
 8003794:	83fb      	strh	r3, [r7, #30]
 8003796:	e006      	b.n	80037a6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f001 f85c 	bl	8004858 <USBD_CtlError>
            ret = USBD_FAIL;
 80037a0:	2302      	movs	r3, #2
 80037a2:	75fb      	strb	r3, [r7, #23]
            break;
 80037a4:	e034      	b.n	8003810 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80037a6:	8bfb      	ldrh	r3, [r7, #30]
 80037a8:	461a      	mov	r2, r3
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 f8bd 	bl	800492c <USBD_CtlSendData>
          break;
 80037b2:	e02d      	b.n	8003810 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d107      	bne.n	80037ce <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3308      	adds	r3, #8
 80037c2:	2201      	movs	r2, #1
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f001 f8b0 	bl	800492c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80037cc:	e020      	b.n	8003810 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80037ce:	6839      	ldr	r1, [r7, #0]
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f001 f841 	bl	8004858 <USBD_CtlError>
            ret = USBD_FAIL;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
          break;
 80037da:	e019      	b.n	8003810 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d106      	bne.n	80037f4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	885b      	ldrh	r3, [r3, #2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80037f2:	e00d      	b.n	8003810 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f001 f82e 	bl	8004858 <USBD_CtlError>
            ret = USBD_FAIL;
 80037fc:	2302      	movs	r3, #2
 80037fe:	75fb      	strb	r3, [r7, #23]
          break;
 8003800:	e006      	b.n	8003810 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f001 f827 	bl	8004858 <USBD_CtlError>
          ret = USBD_FAIL;
 800380a:	2302      	movs	r3, #2
 800380c:	75fb      	strb	r3, [r7, #23]
          break;
 800380e:	bf00      	nop
      }
      break;
 8003810:	e006      	b.n	8003820 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8003812:	6839      	ldr	r1, [r7, #0]
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f001 f81f 	bl	8004858 <USBD_CtlError>
      ret = USBD_FAIL;
 800381a:	2302      	movs	r3, #2
 800381c:	75fb      	strb	r3, [r7, #23]
      break;
 800381e:	bf00      	nop
  }

  return ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200000c8 	.word	0x200000c8
 8003830:	200000b0 	.word	0x200000b0

08003834 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003848:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003850:	2b03      	cmp	r3, #3
 8003852:	d10c      	bne.n	800386e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	7b1b      	ldrb	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2201      	movs	r2, #1
 8003860:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	2181      	movs	r1, #129	; 0x81
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f001 fbdf 	bl	800502c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2222      	movs	r2, #34	; 0x22
 8003884:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000044 	.word	0x20000044

08003898 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2222      	movs	r2, #34	; 0x22
 80038a4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80038a6:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000068 	.word	0x20000068

080038b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2222      	movs	r2, #34	; 0x22
 80038c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80038c6:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000008c 	.word	0x2000008c

080038d8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038ea:	2200      	movs	r2, #0
 80038ec:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
	...

080038fc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	220a      	movs	r2, #10
 8003908:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	200000bc 	.word	0x200000bc

0800391c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003930:	2302      	movs	r3, #2
 8003932:	e01a      	b.n	800396a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f001 fa38 	bl	8004dd8 <USBD_LL_Init>

  return USBD_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e001      	b.n	8003998 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003994:	2302      	movs	r3, #2
 8003996:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 fa5b 	bl	8004e68 <USBD_LL_Start>

  return USBD_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80039dc:	2302      	movs	r3, #2
 80039de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4611      	mov	r1, r2
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3

  return USBD_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 feca 	bl	80047e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00c      	beq.n	8003a8a <USBD_LL_SetupStage+0x56>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d302      	bcc.n	8003a7a <USBD_LL_SetupStage+0x46>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d010      	beq.n	8003a9a <USBD_LL_SetupStage+0x66>
 8003a78:	e017      	b.n	8003aaa <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9ca 	bl	8003e1c <USBD_StdDevReq>
      break;
 8003a88:	e01a      	b.n	8003ac0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa2c 	bl	8003ef0 <USBD_StdItfReq>
      break;
 8003a98:	e012      	b.n	8003ac0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa6a 	bl	8003f7c <USBD_StdEPReq>
      break;
 8003aa8:	e00a      	b.n	8003ac0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f001 fa35 	bl	8004f28 <USBD_LL_StallEP>
      break;
 8003abe:	bf00      	nop
  }

  return USBD_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d14b      	bne.n	8003b76 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003ae4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d134      	bne.n	8003b5a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d919      	bls.n	8003b30 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d203      	bcs.n	8003b1e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	e002      	b.n	8003b24 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 ff2d 	bl	8004988 <USBD_CtlContinueRx>
 8003b2e:	e038      	b.n	8003ba2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d105      	bne.n	8003b52 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 ff2a 	bl	80049ac <USBD_CtlSendStatus>
 8003b58:	e023      	b.n	8003ba2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	d11e      	bne.n	8003ba2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f001 f9da 	bl	8004f28 <USBD_LL_StallEP>
 8003b74:	e015      	b.n	8003ba2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d108      	bne.n	8003b9e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	7afa      	ldrb	r2, [r7, #11]
 8003b96:	4611      	mov	r1, r2
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	4798      	blx	r3
 8003b9c:	e001      	b.n	8003ba2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e000      	b.n	8003ba4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d17f      	bne.n	8003cc0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d15c      	bne.n	8003c8a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d915      	bls.n	8003c08 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	1ad2      	subs	r2, r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 feb5 	bl	8004964 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2100      	movs	r1, #0
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f001 fa36 	bl	8005072 <USBD_LL_PrepareReceive>
 8003c06:	e04e      	b.n	8003ca6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	6912      	ldr	r2, [r2, #16]
 8003c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c14:	fb02 f201 	mul.w	r2, r2, r1
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11c      	bne.n	8003c58 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d316      	bcc.n	8003c58 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d20f      	bcs.n	8003c58 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fe91 	bl	8004964 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f001 fa0e 	bl	8005072 <USBD_LL_PrepareReceive>
 8003c56:	e026      	b.n	8003ca6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d105      	bne.n	8003c7a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f001 f953 	bl	8004f28 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fea5 	bl	80049d2 <USBD_CtlReceiveStatus>
 8003c88:	e00d      	b.n	8003ca6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d004      	beq.n	8003c9e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f001 f941 	bl	8004f28 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d11d      	bne.n	8003cec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fe83 	bl	80039bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003cbe:	e015      	b.n	8003cec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d108      	bne.n	8003ce8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	7afa      	ldrb	r2, [r7, #11]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	4798      	blx	r3
 8003ce6:	e001      	b.n	8003cec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e000      	b.n	8003cee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003cfe:	2340      	movs	r3, #64	; 0x40
 8003d00:	2200      	movs	r2, #0
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 f8ca 	bl	8004e9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2240      	movs	r2, #64	; 0x40
 8003d16:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f001 f8bc 	bl	8004e9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6852      	ldr	r2, [r2, #4]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	4611      	mov	r1, r2
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
  }

  return USBD_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d105      	bne.n	8003ddc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d10b      	bne.n	8003e12 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d004      	beq.n	8003e40 <USBD_StdDevReq+0x24>
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d002      	beq.n	8003e40 <USBD_StdDevReq+0x24>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <USBD_StdDevReq+0x34>
 8003e3e:	e04c      	b.n	8003eda <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      break;
 8003e4e:	e049      	b.n	8003ee4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	d83a      	bhi.n	8003ece <USBD_StdDevReq+0xb2>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <USBD_StdDevReq+0x44>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003eb1 	.word	0x08003eb1
 8003e64:	08003ec5 	.word	0x08003ec5
 8003e68:	08003ecf 	.word	0x08003ecf
 8003e6c:	08003ebb 	.word	0x08003ebb
 8003e70:	08003ecf 	.word	0x08003ecf
 8003e74:	08003e93 	.word	0x08003e93
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003ecf 	.word	0x08003ecf
 8003e80:	08003ea7 	.word	0x08003ea7
 8003e84:	08003e9d 	.word	0x08003e9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9d4 	bl	8004238 <USBD_GetDescriptor>
          break;
 8003e90:	e022      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003e92:	6839      	ldr	r1, [r7, #0]
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fb37 	bl	8004508 <USBD_SetAddress>
          break;
 8003e9a:	e01d      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb74 	bl	800458c <USBD_SetConfig>
          break;
 8003ea4:	e018      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fbfd 	bl	80046a8 <USBD_GetConfig>
          break;
 8003eae:	e013      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fc2c 	bl	8004710 <USBD_GetStatus>
          break;
 8003eb8:	e00e      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fc5a 	bl	8004776 <USBD_SetFeature>
          break;
 8003ec2:	e009      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fc69 	bl	800479e <USBD_ClrFeature>
          break;
 8003ecc:	e004      	b.n	8003ed8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fcc1 	bl	8004858 <USBD_CtlError>
          break;
 8003ed6:	bf00      	nop
      }
      break;
 8003ed8:	e004      	b.n	8003ee4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fcbb 	bl	8004858 <USBD_CtlError>
      break;
 8003ee2:	bf00      	nop
  }

  return ret;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d003      	beq.n	8003f12 <USBD_StdItfReq+0x22>
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d001      	beq.n	8003f12 <USBD_StdItfReq+0x22>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d12a      	bne.n	8003f68 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d81d      	bhi.n	8003f5a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	889b      	ldrh	r3, [r3, #4]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d813      	bhi.n	8003f50 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	88db      	ldrh	r3, [r3, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <USBD_StdItfReq+0x74>
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fd2f 	bl	80049ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003f4e:	e009      	b.n	8003f64 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fc80 	bl	8004858 <USBD_CtlError>
          break;
 8003f58:	e004      	b.n	8003f64 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fc7b 	bl	8004858 <USBD_CtlError>
          break;
 8003f62:	e000      	b.n	8003f66 <USBD_StdItfReq+0x76>
          break;
 8003f64:	bf00      	nop
      }
      break;
 8003f66:	e004      	b.n	8003f72 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fc74 	bl	8004858 <USBD_CtlError>
      break;
 8003f70:	bf00      	nop
  }

  return USBD_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	889b      	ldrh	r3, [r3, #4]
 8003f8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d004      	beq.n	8003fa6 <USBD_StdEPReq+0x2a>
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d002      	beq.n	8003fa6 <USBD_StdEPReq+0x2a>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <USBD_StdEPReq+0x3a>
 8003fa4:	e13d      	b.n	8004222 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
      break;
 8003fb4:	e13a      	b.n	800422c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d10a      	bne.n	8003fd8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	e12a      	b.n	800422e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d03e      	beq.n	800405e <USBD_StdEPReq+0xe2>
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d002      	beq.n	8003fea <USBD_StdEPReq+0x6e>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d070      	beq.n	80040ca <USBD_StdEPReq+0x14e>
 8003fe8:	e115      	b.n	8004216 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d002      	beq.n	8003ffa <USBD_StdEPReq+0x7e>
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d015      	beq.n	8004024 <USBD_StdEPReq+0xa8>
 8003ff8:	e02b      	b.n	8004052 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <USBD_StdEPReq+0x9e>
 8004000:	7bbb      	ldrb	r3, [r7, #14]
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d009      	beq.n	800401a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004006:	7bbb      	ldrb	r3, [r7, #14]
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ff8c 	bl	8004f28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 ff88 	bl	8004f28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004018:	e020      	b.n	800405c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fc1b 	bl	8004858 <USBD_CtlError>
              break;
 8004022:	e01b      	b.n	800405c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	885b      	ldrh	r3, [r3, #2]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10e      	bne.n	800404a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800402c:	7bbb      	ldrb	r3, [r7, #14]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <USBD_StdEPReq+0xce>
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d008      	beq.n	800404a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	88db      	ldrh	r3, [r3, #6]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004040:	7bbb      	ldrb	r3, [r7, #14]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 ff6f 	bl	8004f28 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fcae 	bl	80049ac <USBD_CtlSendStatus>

              break;
 8004050:	e004      	b.n	800405c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fbff 	bl	8004858 <USBD_CtlError>
              break;
 800405a:	bf00      	nop
          }
          break;
 800405c:	e0e0      	b.n	8004220 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004064:	2b02      	cmp	r3, #2
 8004066:	d002      	beq.n	800406e <USBD_StdEPReq+0xf2>
 8004068:	2b03      	cmp	r3, #3
 800406a:	d015      	beq.n	8004098 <USBD_StdEPReq+0x11c>
 800406c:	e026      	b.n	80040bc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800406e:	7bbb      	ldrb	r3, [r7, #14]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00c      	beq.n	800408e <USBD_StdEPReq+0x112>
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	2b80      	cmp	r3, #128	; 0x80
 8004078:	d009      	beq.n	800408e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800407a:	7bbb      	ldrb	r3, [r7, #14]
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 ff52 	bl	8004f28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 ff4e 	bl	8004f28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800408c:	e01c      	b.n	80040c8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800408e:	6839      	ldr	r1, [r7, #0]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fbe1 	bl	8004858 <USBD_CtlError>
              break;
 8004096:	e017      	b.n	80040c8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	885b      	ldrh	r3, [r3, #2]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d112      	bne.n	80040c6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 ff59 	bl	8004f66 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fc79 	bl	80049ac <USBD_CtlSendStatus>
              }
              break;
 80040ba:	e004      	b.n	80040c6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fbca 	bl	8004858 <USBD_CtlError>
              break;
 80040c4:	e000      	b.n	80040c8 <USBD_StdEPReq+0x14c>
              break;
 80040c6:	bf00      	nop
          }
          break;
 80040c8:	e0aa      	b.n	8004220 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d002      	beq.n	80040da <USBD_StdEPReq+0x15e>
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d032      	beq.n	800413e <USBD_StdEPReq+0x1c2>
 80040d8:	e097      	b.n	800420a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <USBD_StdEPReq+0x174>
 80040e0:	7bbb      	ldrb	r3, [r7, #14]
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d004      	beq.n	80040f0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fbb5 	bl	8004858 <USBD_CtlError>
                break;
 80040ee:	e091      	b.n	8004214 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da0b      	bge.n	8004110 <USBD_StdEPReq+0x194>
 80040f8:	7bbb      	ldrb	r3, [r7, #14]
 80040fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	3310      	adds	r3, #16
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	e00b      	b.n	8004128 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2202      	movs	r2, #2
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbf8 	bl	800492c <USBD_CtlSendData>
              break;
 800413c:	e06a      	b.n	8004214 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800413e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004142:	2b00      	cmp	r3, #0
 8004144:	da11      	bge.n	800416a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004146:	7bbb      	ldrb	r3, [r7, #14]
 8004148:	f003 020f 	and.w	r2, r3, #15
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3318      	adds	r3, #24
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d117      	bne.n	8004190 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fb78 	bl	8004858 <USBD_CtlError>
                  break;
 8004168:	e054      	b.n	8004214 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	f003 020f 	and.w	r2, r3, #15
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb65 	bl	8004858 <USBD_CtlError>
                  break;
 800418e:	e041      	b.n	8004214 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004194:	2b00      	cmp	r3, #0
 8004196:	da0b      	bge.n	80041b0 <USBD_StdEPReq+0x234>
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	3310      	adds	r3, #16
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4413      	add	r3, r2
 80041ac:	3304      	adds	r3, #4
 80041ae:	e00b      	b.n	80041c8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80041b0:	7bbb      	ldrb	r3, [r7, #14]
 80041b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <USBD_StdEPReq+0x25a>
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d103      	bne.n	80041de <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e00e      	b.n	80041fc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	4619      	mov	r1, r3
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fede 	bl	8004fa4 <USBD_LL_IsStallEP>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e002      	b.n	80041fc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2202      	movs	r2, #2
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb92 	bl	800492c <USBD_CtlSendData>
              break;
 8004208:	e004      	b.n	8004214 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb23 	bl	8004858 <USBD_CtlError>
              break;
 8004212:	bf00      	nop
          }
          break;
 8004214:	e004      	b.n	8004220 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb1d 	bl	8004858 <USBD_CtlError>
          break;
 800421e:	bf00      	nop
      }
      break;
 8004220:	e004      	b.n	800422c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fb17 	bl	8004858 <USBD_CtlError>
      break;
 800422a:	bf00      	nop
  }

  return ret;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	885b      	ldrh	r3, [r3, #2]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	2b06      	cmp	r3, #6
 800425a:	f200 8128 	bhi.w	80044ae <USBD_GetDescriptor+0x276>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <USBD_GetDescriptor+0x2c>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004281 	.word	0x08004281
 8004268:	08004299 	.word	0x08004299
 800426c:	080042d9 	.word	0x080042d9
 8004270:	080044af 	.word	0x080044af
 8004274:	080044af 	.word	0x080044af
 8004278:	0800444f 	.word	0x0800444f
 800427c:	0800447b 	.word	0x0800447b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	7c12      	ldrb	r2, [r2, #16]
 800428c:	f107 0108 	add.w	r1, r7, #8
 8004290:	4610      	mov	r0, r2
 8004292:	4798      	blx	r3
 8004294:	60f8      	str	r0, [r7, #12]
      break;
 8004296:	e112      	b.n	80044be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7c1b      	ldrb	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f107 0208 	add.w	r2, r7, #8
 80042ac:	4610      	mov	r0, r2
 80042ae:	4798      	blx	r3
 80042b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	2202      	movs	r2, #2
 80042b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80042ba:	e100      	b.n	80044be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	f107 0208 	add.w	r2, r7, #8
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
 80042cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]
      break;
 80042d6:	e0f2      	b.n	80044be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	885b      	ldrh	r3, [r3, #2]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b05      	cmp	r3, #5
 80042e0:	f200 80ac 	bhi.w	800443c <USBD_GetDescriptor+0x204>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <USBD_GetDescriptor+0xb4>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004305 	.word	0x08004305
 80042f0:	08004339 	.word	0x08004339
 80042f4:	0800436d 	.word	0x0800436d
 80042f8:	080043a1 	.word	0x080043a1
 80042fc:	080043d5 	.word	0x080043d5
 8004300:	08004409 	.word	0x08004409
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	7c12      	ldrb	r2, [r2, #16]
 800431c:	f107 0108 	add.w	r1, r7, #8
 8004320:	4610      	mov	r0, r2
 8004322:	4798      	blx	r3
 8004324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004326:	e091      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa94 	bl	8004858 <USBD_CtlError>
            err++;
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	3301      	adds	r3, #1
 8004334:	72fb      	strb	r3, [r7, #11]
          break;
 8004336:	e089      	b.n	800444c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	7c12      	ldrb	r2, [r2, #16]
 8004350:	f107 0108 	add.w	r1, r7, #8
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
 8004358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800435a:	e077      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa7a 	bl	8004858 <USBD_CtlError>
            err++;
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	3301      	adds	r3, #1
 8004368:	72fb      	strb	r3, [r7, #11]
          break;
 800436a:	e06f      	b.n	800444c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	7c12      	ldrb	r2, [r2, #16]
 8004384:	f107 0108 	add.w	r1, r7, #8
 8004388:	4610      	mov	r0, r2
 800438a:	4798      	blx	r3
 800438c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800438e:	e05d      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa60 	bl	8004858 <USBD_CtlError>
            err++;
 8004398:	7afb      	ldrb	r3, [r7, #11]
 800439a:	3301      	adds	r3, #1
 800439c:	72fb      	strb	r3, [r7, #11]
          break;
 800439e:	e055      	b.n	800444c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	7c12      	ldrb	r2, [r2, #16]
 80043b8:	f107 0108 	add.w	r1, r7, #8
 80043bc:	4610      	mov	r0, r2
 80043be:	4798      	blx	r3
 80043c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043c2:	e043      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fa46 	bl	8004858 <USBD_CtlError>
            err++;
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	3301      	adds	r3, #1
 80043d0:	72fb      	strb	r3, [r7, #11]
          break;
 80043d2:	e03b      	b.n	800444c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	7c12      	ldrb	r2, [r2, #16]
 80043ec:	f107 0108 	add.w	r1, r7, #8
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
 80043f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043f6:	e029      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa2c 	bl	8004858 <USBD_CtlError>
            err++;
 8004400:	7afb      	ldrb	r3, [r7, #11]
 8004402:	3301      	adds	r3, #1
 8004404:	72fb      	strb	r3, [r7, #11]
          break;
 8004406:	e021      	b.n	800444c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	7c12      	ldrb	r2, [r2, #16]
 8004420:	f107 0108 	add.w	r1, r7, #8
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
 8004428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800442a:	e00f      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa12 	bl	8004858 <USBD_CtlError>
            err++;
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	3301      	adds	r3, #1
 8004438:	72fb      	strb	r3, [r7, #11]
          break;
 800443a:	e007      	b.n	800444c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa0a 	bl	8004858 <USBD_CtlError>
          err++;
 8004444:	7afb      	ldrb	r3, [r7, #11]
 8004446:	3301      	adds	r3, #1
 8004448:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800444a:	e038      	b.n	80044be <USBD_GetDescriptor+0x286>
 800444c:	e037      	b.n	80044be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7c1b      	ldrb	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	f107 0208 	add.w	r2, r7, #8
 8004462:	4610      	mov	r0, r2
 8004464:	4798      	blx	r3
 8004466:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004468:	e029      	b.n	80044be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9f3 	bl	8004858 <USBD_CtlError>
        err++;
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	3301      	adds	r3, #1
 8004476:	72fb      	strb	r3, [r7, #11]
      break;
 8004478:	e021      	b.n	80044be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7c1b      	ldrb	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f107 0208 	add.w	r2, r7, #8
 800448e:	4610      	mov	r0, r2
 8004490:	4798      	blx	r3
 8004492:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	2207      	movs	r2, #7
 800449a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800449c:	e00f      	b.n	80044be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9d9 	bl	8004858 <USBD_CtlError>
        err++;
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	3301      	adds	r3, #1
 80044aa:	72fb      	strb	r3, [r7, #11]
      break;
 80044ac:	e007      	b.n	80044be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f9d1 	bl	8004858 <USBD_CtlError>
      err++;
 80044b6:	7afb      	ldrb	r3, [r7, #11]
 80044b8:	3301      	adds	r3, #1
 80044ba:	72fb      	strb	r3, [r7, #11]
      break;
 80044bc:	bf00      	nop
  }

  if (err != 0U)
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11c      	bne.n	80044fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d011      	beq.n	80044ee <USBD_GetDescriptor+0x2b6>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	88db      	ldrh	r3, [r3, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	88da      	ldrh	r2, [r3, #6]
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	4293      	cmp	r3, r2
 80044da:	bf28      	it	cs
 80044dc:	4613      	movcs	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fa1f 	bl	800492c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	88db      	ldrh	r3, [r3, #6]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa58 	bl	80049ac <USBD_CtlSendStatus>
 80044fc:	e000      	b.n	8004500 <USBD_GetDescriptor+0x2c8>
    return;
 80044fe:	bf00      	nop
    }
  }
}
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	889b      	ldrh	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d130      	bne.n	800457c <USBD_SetAddress+0x74>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	88db      	ldrh	r3, [r3, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d12c      	bne.n	800457c <USBD_SetAddress+0x74>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	885b      	ldrh	r3, [r3, #2]
 8004526:	2b7f      	cmp	r3, #127	; 0x7f
 8004528:	d828      	bhi.n	800457c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	885b      	ldrh	r3, [r3, #2]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004534:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800453c:	2b03      	cmp	r3, #3
 800453e:	d104      	bne.n	800454a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f988 	bl	8004858 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004548:	e01c      	b.n	8004584 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7bfa      	ldrb	r2, [r7, #15]
 800454e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fd49 	bl	8004fee <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa25 	bl	80049ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004570:	e008      	b.n	8004584 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800457a:	e003      	b.n	8004584 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f96a 	bl	8004858 <USBD_CtlError>
  }
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	885b      	ldrh	r3, [r3, #2]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <USBD_SetConfig+0x118>)
 800459e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80045a0:	4b40      	ldr	r3, [pc, #256]	; (80046a4 <USBD_SetConfig+0x118>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d904      	bls.n	80045b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f954 	bl	8004858 <USBD_CtlError>
 80045b0:	e075      	b.n	800469e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d002      	beq.n	80045c2 <USBD_SetConfig+0x36>
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d023      	beq.n	8004608 <USBD_SetConfig+0x7c>
 80045c0:	e062      	b.n	8004688 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80045c2:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <USBD_SetConfig+0x118>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <USBD_SetConfig+0x118>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2203      	movs	r2, #3
 80045d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <USBD_SetConfig+0x118>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff f9f4 	bl	80039d0 <USBD_SetClassConfig>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d104      	bne.n	80045f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f931 	bl	8004858 <USBD_CtlError>
            return;
 80045f6:	e052      	b.n	800469e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f9d7 	bl	80049ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80045fe:	e04e      	b.n	800469e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9d3 	bl	80049ac <USBD_CtlSendStatus>
        break;
 8004606:	e04a      	b.n	800469e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004608:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <USBD_SetConfig+0x118>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d112      	bne.n	8004636 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004618:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <USBD_SetConfig+0x118>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <USBD_SetConfig+0x118>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff f9f0 	bl	8003a0e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9bc 	bl	80049ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004634:	e033      	b.n	800469e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <USBD_SetConfig+0x118>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d01d      	beq.n	8004680 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff f9de 	bl	8003a0e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <USBD_SetConfig+0x118>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <USBD_SetConfig+0x118>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff f9b4 	bl	80039d0 <USBD_SetClassConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b02      	cmp	r3, #2
 800466c:	d104      	bne.n	8004678 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8f1 	bl	8004858 <USBD_CtlError>
            return;
 8004676:	e012      	b.n	800469e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f997 	bl	80049ac <USBD_CtlSendStatus>
        break;
 800467e:	e00e      	b.n	800469e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f993 	bl	80049ac <USBD_CtlSendStatus>
        break;
 8004686:	e00a      	b.n	800469e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8e4 	bl	8004858 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <USBD_SetConfig+0x118>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff f9b9 	bl	8003a0e <USBD_ClrClassConfig>
        break;
 800469c:	bf00      	nop
    }
  }
}
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2000017c 	.word	0x2000017c

080046a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	88db      	ldrh	r3, [r3, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d004      	beq.n	80046c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f8cb 	bl	8004858 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80046c2:	e021      	b.n	8004708 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	db17      	blt.n	80046fe <USBD_GetConfig+0x56>
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	dd02      	ble.n	80046d8 <USBD_GetConfig+0x30>
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d00b      	beq.n	80046ee <USBD_GetConfig+0x46>
 80046d6:	e012      	b.n	80046fe <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3308      	adds	r3, #8
 80046e2:	2201      	movs	r2, #1
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f920 	bl	800492c <USBD_CtlSendData>
        break;
 80046ec:	e00c      	b.n	8004708 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2201      	movs	r2, #1
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f918 	bl	800492c <USBD_CtlSendData>
        break;
 80046fc:	e004      	b.n	8004708 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8a9 	bl	8004858 <USBD_CtlError>
        break;
 8004706:	bf00      	nop
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004720:	3b01      	subs	r3, #1
 8004722:	2b02      	cmp	r3, #2
 8004724:	d81e      	bhi.n	8004764 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	88db      	ldrh	r3, [r3, #6]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d004      	beq.n	8004738 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f891 	bl	8004858 <USBD_CtlError>
        break;
 8004736:	e01a      	b.n	800476e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f043 0202 	orr.w	r2, r3, #2
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	330c      	adds	r3, #12
 8004758:	2202      	movs	r2, #2
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f8e5 	bl	800492c <USBD_CtlSendData>
      break;
 8004762:	e004      	b.n	800476e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f876 	bl	8004858 <USBD_CtlError>
      break;
 800476c:	bf00      	nop
  }
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	885b      	ldrh	r3, [r3, #2]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f90b 	bl	80049ac <USBD_CtlSendStatus>
  }
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ae:	3b01      	subs	r3, #1
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d80b      	bhi.n	80047cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	885b      	ldrh	r3, [r3, #2]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10c      	bne.n	80047d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8f1 	bl	80049ac <USBD_CtlSendStatus>
      }
      break;
 80047ca:	e004      	b.n	80047d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f842 	bl	8004858 <USBD_CtlError>
      break;
 80047d4:	e000      	b.n	80047d8 <USBD_ClrFeature+0x3a>
      break;
 80047d6:	bf00      	nop
  }
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	785a      	ldrb	r2, [r3, #1]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	3302      	adds	r3, #2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b29a      	uxth	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	3303      	adds	r3, #3
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	b29b      	uxth	r3, r3
 800480e:	4413      	add	r3, r2
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	3304      	adds	r3, #4
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b29a      	uxth	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	3305      	adds	r3, #5
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	b29b      	uxth	r3, r3
 800482a:	4413      	add	r3, r2
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	3306      	adds	r3, #6
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	b29a      	uxth	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3307      	adds	r3, #7
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	b29b      	uxth	r3, r3
 8004846:	4413      	add	r3, r2
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	80da      	strh	r2, [r3, #6]

}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fb5f 	bl	8004f28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800486a:	2100      	movs	r1, #0
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb5b 	bl	8004f28 <USBD_LL_StallEP>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d032      	beq.n	80048f6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f834 	bl	80048fe <USBD_GetLen>
 8004896:	4603      	mov	r3, r0
 8004898:	3301      	adds	r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	75fa      	strb	r2, [r7, #23]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4413      	add	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	75fa      	strb	r2, [r7, #23]
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	2203      	movs	r2, #3
 80048c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80048c6:	e012      	b.n	80048ee <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	60fa      	str	r2, [r7, #12]
 80048ce:	7dfa      	ldrb	r2, [r7, #23]
 80048d0:	1c51      	adds	r1, r2, #1
 80048d2:	75f9      	strb	r1, [r7, #23]
 80048d4:	4611      	mov	r1, r2
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	440a      	add	r2, r1
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	75fa      	strb	r2, [r7, #23]
 80048e4:	461a      	mov	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e8      	bne.n	80048c8 <USBD_GetString+0x4e>
    }
  }
}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800490a:	e005      	b.n	8004918 <USBD_GetLen+0x1a>
  {
    len++;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	3301      	adds	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3301      	adds	r3, #1
 8004916:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f5      	bne.n	800490c <USBD_GetLen+0xe>
  }

  return len;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2202      	movs	r2, #2
 800493e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	2100      	movs	r1, #0
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fb69 	bl	800502c <USBD_LL_Transmit>

  return USBD_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	2100      	movs	r1, #0
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fb57 	bl	800502c <USBD_LL_Transmit>

  return USBD_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	2100      	movs	r1, #0
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fb68 	bl	8005072 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2204      	movs	r2, #4
 80049b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80049bc:	2300      	movs	r3, #0
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fb32 	bl	800502c <USBD_LL_Transmit>

  return USBD_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2205      	movs	r2, #5
 80049de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049e2:	2300      	movs	r3, #0
 80049e4:	2200      	movs	r2, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb42 	bl	8005072 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80049fc:	2200      	movs	r2, #0
 80049fe:	490e      	ldr	r1, [pc, #56]	; (8004a38 <MX_USB_DEVICE_Init+0x40>)
 8004a00:	480e      	ldr	r0, [pc, #56]	; (8004a3c <MX_USB_DEVICE_Init+0x44>)
 8004a02:	f7fe ff8b 	bl	800391c <USBD_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004a0c:	f7fb fd3c 	bl	8000488 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004a10:	490b      	ldr	r1, [pc, #44]	; (8004a40 <MX_USB_DEVICE_Init+0x48>)
 8004a12:	480a      	ldr	r0, [pc, #40]	; (8004a3c <MX_USB_DEVICE_Init+0x44>)
 8004a14:	f7fe ffad 	bl	8003972 <USBD_RegisterClass>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004a1e:	f7fb fd33 	bl	8000488 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004a22:	4806      	ldr	r0, [pc, #24]	; (8004a3c <MX_USB_DEVICE_Init+0x44>)
 8004a24:	f7fe ffbe 	bl	80039a4 <USBD_Start>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8004a2e:	f7fb fd2b 	bl	8000488 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000108 	.word	0x20000108
 8004a3c:	200001a0 	.word	0x200001a0
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	6039      	str	r1, [r7, #0]
 8004a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2212      	movs	r2, #18
 8004a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004a56:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000124 	.word	0x20000124

08004a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2204      	movs	r2, #4
 8004a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004a7a:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000138 	.word	0x20000138

08004a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	4907      	ldr	r1, [pc, #28]	; (8004ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8004aa2:	4808      	ldr	r0, [pc, #32]	; (8004ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8004aa4:	f7ff fee9 	bl	800487a <USBD_GetString>
 8004aa8:	e004      	b.n	8004ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	4904      	ldr	r1, [pc, #16]	; (8004ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8004ab0:	f7ff fee3 	bl	800487a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000464 	.word	0x20000464
 8004ac4:	080051d4 	.word	0x080051d4

08004ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004ad8:	4804      	ldr	r0, [pc, #16]	; (8004aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004ada:	f7ff fece 	bl	800487a <USBD_GetString>
  return USBD_StrDesc;
 8004ade:	4b02      	ldr	r3, [pc, #8]	; (8004ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000464 	.word	0x20000464
 8004aec:	080051ec 	.word	0x080051ec

08004af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	221a      	movs	r2, #26
 8004b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004b02:	f000 f843 	bl	8004b8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004b06:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000013c 	.word	0x2000013c

08004b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4907      	ldr	r1, [pc, #28]	; (8004b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004b2a:	4808      	ldr	r0, [pc, #32]	; (8004b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8004b2c:	f7ff fea5 	bl	800487a <USBD_GetString>
 8004b30:	e004      	b.n	8004b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4904      	ldr	r1, [pc, #16]	; (8004b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004b36:	4805      	ldr	r0, [pc, #20]	; (8004b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8004b38:	f7ff fe9f 	bl	800487a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000464 	.word	0x20000464
 8004b4c:	08005200 	.word	0x08005200

08004b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b66:	4808      	ldr	r0, [pc, #32]	; (8004b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b68:	f7ff fe87 	bl	800487a <USBD_GetString>
 8004b6c:	e004      	b.n	8004b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004b72:	4805      	ldr	r0, [pc, #20]	; (8004b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004b74:	f7ff fe81 	bl	800487a <USBD_GetString>
  }
  return USBD_StrDesc;
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000464 	.word	0x20000464
 8004b88:	0800520c 	.word	0x0800520c

08004b8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <Get_SerialNum+0x44>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <Get_SerialNum+0x48>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <Get_SerialNum+0x4c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	4909      	ldr	r1, [pc, #36]	; (8004bdc <Get_SerialNum+0x50>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f814 	bl	8004be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	4908      	ldr	r1, [pc, #32]	; (8004be0 <Get_SerialNum+0x54>)
 8004bc0:	68b8      	ldr	r0, [r7, #8]
 8004bc2:	f000 f80f 	bl	8004be4 <IntToUnicode>
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	1ffff7e8 	.word	0x1ffff7e8
 8004bd4:	1ffff7ec 	.word	0x1ffff7ec
 8004bd8:	1ffff7f0 	.word	0x1ffff7f0
 8004bdc:	2000013e 	.word	0x2000013e
 8004be0:	2000014e 	.word	0x2000014e

08004be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
 8004bfa:	e027      	b.n	8004c4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0f1b      	lsrs	r3, r3, #28
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d80b      	bhi.n	8004c1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	0f1b      	lsrs	r3, r3, #28
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4619      	mov	r1, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	440b      	add	r3, r1
 8004c14:	3230      	adds	r2, #48	; 0x30
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e00a      	b.n	8004c32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0f1b      	lsrs	r3, r3, #28
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4619      	mov	r1, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3237      	adds	r2, #55	; 0x37
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
 8004c4c:	7dfa      	ldrb	r2, [r7, #23]
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3d3      	bcc.n	8004bfc <IntToUnicode+0x18>
  }
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
	...

08004c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <HAL_PCD_MspInit+0x44>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_PCD_MspInit+0x48>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <HAL_PCD_MspInit+0x48>)
 8004c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c7c:	61d3      	str	r3, [r2, #28]
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <HAL_PCD_MspInit+0x48>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2014      	movs	r0, #20
 8004c90:	f7fb fe1b 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004c94:	2014      	movs	r0, #20
 8004c96:	f7fb fe34 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40005c00 	.word	0x40005c00
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f7fe feb6 	bl	8003a34 <USBD_LL_SetupStage>
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	015b      	lsls	r3, r3, #5
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7fe fee9 	bl	8003aca <USBD_LL_DataOutStage>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	015b      	lsls	r3, r3, #5
 8004d18:	4413      	add	r3, r2
 8004d1a:	333c      	adds	r3, #60	; 0x3c
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe ff43 	bl	8003bac <USBD_LL_DataInStage>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff f853 	bl	8003de8 <USBD_LL_SOF>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d001      	beq.n	8004d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004d5e:	f7fb fb93 	bl	8000488 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff f803 	bl	8003d78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe ffbc 	bl	8003cf6 <USBD_LL_Reset>
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fffd 	bl	8003d96 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_PCD_SuspendCallback+0x30>)
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <HAL_PCD_SuspendCallback+0x30>)
 8004daa:	f043 0306 	orr.w	r3, r3, #6
 8004dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed00 	.word	0xe000ed00

08004dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fff7 	bl	8003dbe <USBD_LL_Resume>
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8004de0:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <USBD_LL_Init+0x88>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <USBD_LL_Init+0x88>)
 8004dec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <USBD_LL_Init+0x88>)
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <USBD_LL_Init+0x8c>)
 8004df4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <USBD_LL_Init+0x88>)
 8004df8:	2208      	movs	r2, #8
 8004dfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <USBD_LL_Init+0x88>)
 8004dfe:	2202      	movs	r2, #2
 8004e00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <USBD_LL_Init+0x88>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <USBD_LL_Init+0x88>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <USBD_LL_Init+0x88>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004e14:	4812      	ldr	r0, [pc, #72]	; (8004e60 <USBD_LL_Init+0x88>)
 8004e16:	f7fb ff00 	bl	8000c1a <HAL_PCD_Init>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8004e20:	f7fb fb32 	bl	8000488 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e2a:	2318      	movs	r3, #24
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	f7fc fd84 	bl	800193c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e3a:	2358      	movs	r3, #88	; 0x58
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	f7fc fd7c 	bl	800193c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2181      	movs	r1, #129	; 0x81
 8004e52:	f7fc fd73 	bl	800193c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000664 	.word	0x20000664
 8004e64:	40005c00 	.word	0x40005c00

08004e68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb ffac 	bl	8000ddc <HAL_PCD_Start>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f934 	bl	80050f8 <USBD_Get_USB_Status>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4603      	mov	r3, r0
 8004eae:	70fb      	strb	r3, [r7, #3]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70bb      	strb	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8004ec6:	78bb      	ldrb	r3, [r7, #2]
 8004ec8:	883a      	ldrh	r2, [r7, #0]
 8004eca:	78f9      	ldrb	r1, [r7, #3]
 8004ecc:	f7fc f8df 	bl	800108e <HAL_PCD_EP_Open>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f90e 	bl	80050f8 <USBD_Get_USB_Status>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fc f920 	bl	800114e <HAL_PCD_EP_Close>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f8ef 	bl	80050f8 <USBD_Get_USB_Status>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc f9b6 	bl	80012b8 <HAL_PCD_EP_SetStall>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f8d0 	bl	80050f8 <USBD_Get_USB_Status>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fc f9f1 	bl	800136c <HAL_PCD_EP_ClrStall>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f8b1 	bl	80050f8 <USBD_Get_USB_Status>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fb6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8004fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	da08      	bge.n	8004fd2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	015b      	lsls	r3, r3, #5
 8004fca:	4413      	add	r3, r2
 8004fcc:	332a      	adds	r3, #42	; 0x2a
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	e008      	b.n	8004fe4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	015b      	lsls	r3, r3, #5
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004fe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f7fc f819 	bl	8001044 <HAL_PCD_SetAddress>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f86d 	bl	80050f8 <USBD_Get_USB_Status>
 800501e:	4603      	mov	r3, r0
 8005020:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005022:	7bbb      	ldrb	r3, [r7, #14]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	460b      	mov	r3, r1
 800503a:	72fb      	strb	r3, [r7, #11]
 800503c:	4613      	mov	r3, r2
 800503e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	7af9      	ldrb	r1, [r7, #11]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	f7fc f8f7 	bl	8001246 <HAL_PCD_EP_Transmit>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f84a 	bl	80050f8 <USBD_Get_USB_Status>
 8005064:	4603      	mov	r3, r0
 8005066:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005068:	7dbb      	ldrb	r3, [r7, #22]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b086      	sub	sp, #24
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	461a      	mov	r2, r3
 800507e:	460b      	mov	r3, r1
 8005080:	72fb      	strb	r3, [r7, #11]
 8005082:	4613      	mov	r3, r2
 8005084:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	7af9      	ldrb	r1, [r7, #11]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	f7fc f89a 	bl	80011d2 <HAL_PCD_EP_Receive>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f827 	bl	80050f8 <USBD_Get_USB_Status>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <USBD_static_malloc+0x14>)
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	20000180 	.word	0x20000180

080050d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d817      	bhi.n	800513c <USBD_Get_USB_Status+0x44>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <USBD_Get_USB_Status+0x1c>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005125 	.word	0x08005125
 8005118:	0800512b 	.word	0x0800512b
 800511c:	08005131 	.word	0x08005131
 8005120:	08005137 	.word	0x08005137
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
    break;
 8005128:	e00b      	b.n	8005142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800512a:	2302      	movs	r3, #2
 800512c:	73fb      	strb	r3, [r7, #15]
    break;
 800512e:	e008      	b.n	8005142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
    break;
 8005134:	e005      	b.n	8005142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005136:	2302      	movs	r3, #2
 8005138:	73fb      	strb	r3, [r7, #15]
    break;
 800513a:	e002      	b.n	8005142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800513c:	2302      	movs	r3, #2
 800513e:	73fb      	strb	r3, [r7, #15]
    break;
 8005140:	bf00      	nop
  }
  return usb_status;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	2500      	movs	r5, #0
 8005154:	4e0c      	ldr	r6, [pc, #48]	; (8005188 <__libc_init_array+0x38>)
 8005156:	4c0d      	ldr	r4, [pc, #52]	; (800518c <__libc_init_array+0x3c>)
 8005158:	1ba4      	subs	r4, r4, r6
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	42a5      	cmp	r5, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	f000 f822 	bl	80051a8 <_init>
 8005164:	2500      	movs	r5, #0
 8005166:	4e0a      	ldr	r6, [pc, #40]	; (8005190 <__libc_init_array+0x40>)
 8005168:	4c0a      	ldr	r4, [pc, #40]	; (8005194 <__libc_init_array+0x44>)
 800516a:	1ba4      	subs	r4, r4, r6
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	42a5      	cmp	r5, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005178:	4798      	blx	r3
 800517a:	3501      	adds	r5, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005182:	4798      	blx	r3
 8005184:	3501      	adds	r5, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	0800522c 	.word	0x0800522c
 800518c:	0800522c 	.word	0x0800522c
 8005190:	0800522c 	.word	0x0800522c
 8005194:	08005230 	.word	0x08005230

08005198 <memset>:
 8005198:	4603      	mov	r3, r0
 800519a:	4402      	add	r2, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <_init>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr

080051b4 <_fini>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr
